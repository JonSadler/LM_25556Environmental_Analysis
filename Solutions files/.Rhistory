tm_polygons(
fill = "Unemployed",
fill.scale = tm_scale_intervals(values = "brewer.greens", style = "jenks"),
fill.legend = tm_legend(title = "Unemployment Rate", title.size = 0.8)) +
tm_borders(
col = "lightgray",    # Set border color to light gray
lwd = 0.5) +             # Set border line width
tm_layout(legend.outside = TRUE)
week_8_glm <- bham_census_sf %>% dplyr::select(LSOA21CD, Agebelow30,
DeprivL2to4,Unemployed,Occ_rating,White_pop,Qualification,geometry)
# Load data
bham_census <- read_csv("~/Dropbox/LgDatafiles/Teaching/Quant_meths/Data/Bham_21_census_dataglm.csv")
Birmingham_C21.shp <- st_read("~/Dropbox/LgDatafiles/Teaching/Quant_meths/Data/shapefiles/Birmingham_C21.shp")
# Combine the geopack to the csv file
bham_census_sf <- Birmingham_C21.shp %>%
left_join(bham_census, by = "LSOA21CD")
glimpse(bham_census_sf)
week_8_glm <- bham_census_sf %>% dplyr::select(LSOA21CD, Agebelow30,
DeprivL2to4,Unemployed,Occ_rating,White_pop,Qualification,geometry)
glimpse(week_8_glm)
skim(week_8_glm)
scatterplotMatrix(~ Unemployed +
Agebelow30 +
Qualification +
DeprivL2to4 +
Occ_rating,
col = "black",
diagonal = list(method = "qqplot"),
regLine = list(col = "blue", lwd = 2),   # Linear regression line in blue
smooth = list(col.smooth = "blue", lty.smooth = 2, lwd.smooth = 2), # Loess line in blue, dashed
data = week_8_glm)
# code updated to tmap v.4
tm_shape(bham_LSOA_census) +
tm_polygons(
fill = "Unemployed",
fill.scale = tm_scale_intervals(values = "brewer.greens", style = "jenks"),
fill.legend = tm_legend(title = "Unemployment Rate", title.size = 0.8)) +
tm_borders(
col = "lightgray",    # Set border color to light gray
lwd = 0.5) +             # Set border line width
tm_layout(legend.outside = TRUE)
# code updated to tmap v.4
tm_shape(bham_LSOA) +
tm_polygons(
fill = "Unemployed",
fill.scale = tm_scale_intervals(values = "brewer.greens", style = "jenks"),
fill.legend = tm_legend(title = "Unemployment Rate", title.size = 0.8)) +
tm_borders(
col = "lightgray",    # Set border color to light gray
lwd = 0.5) +             # Set border line width
tm_layout(legend.outside = TRUE)
# code updated to tmap v.4
tm_shape(week_8_glm) +
tm_polygons(
fill = "Unemployed",
fill.scale = tm_scale_intervals(values = "brewer.greens", style = "jenks"),
fill.legend = tm_legend(title = "Unemployment Rate", title.size = 0.8)) +
tm_borders(
col = "lightgray",    # Set border color to light gray
lwd = 0.5) +             # Set border line width
tm_layout(legend.outside = TRUE)
# code updated to tmap v.4
tm_shape(week_8_glm) +
tm_polygons(
fill = "Unemployed",
fill.scale = tm_scale_intervals(values = "brewer.greens", style = "jenks"),
fill.legend = tm_legend(title = "Number of Unemployment people", title.size = 0.8)) +
tm_borders(
col = "lightgray",    # Set border color to light gray
lwd = 0.5) +             # Set border line width
tm_layout(legend.outside = TRUE)
# List of packages
packages <- c("sf", "dplyr", "ggplot2","tidyverse", "moderndive",
"ggfortify", "performance", "car", "skimr", "gridExtra", "broom", "ggeffects", "tmap","MASS")
# Load all packages
lapply(packages, library, character.only = TRUE)
# List of packages
packages <- c("sf", "dplyr", "ggplot2","tidyverse", "moderndive",
"ggfortify", "performance", "car", "skimr", "gridExtra", "broom",
"ggeffects", "tmap","MASS")
# Load all packages
lapply(packages, library, character.only = TRUE)
# List of packages
packages <- c("sf", "dplyr", "ggplot2","tidyverse", "moderndive",
"ggfortify", "performance", "car", "skimr", "gridExtra", "broom",
"ggeffects", "tmap","MASS")
# Load all packages
lapply(packages, library, character.only = TRUE)
# Create a data frame of error structures, links, and data types
library(ggplot2)
glm_links <- data.frame(
ErrorStructure = c("Gaussian", "Gamma", "Poisson", "Quasi Poisson", "Negative Binomial", "Binomial", "Multinomial"),
Link = c("Identity", "Inverse", "Log", "Log", "Log", "Logit", "Logit"),
DataExamples = c(
"Continuous",
"Continuous",
"Count",
"Count",
"Count",
"Binary",
"Categorical"
),
DataType = c("Continuous", "Continuous", "Count", "Count", "Count", "Binary", "Categorical")
)
# Reorder levels
glm_links$ErrorStructure <- factor(glm_links$ErrorStructure,
levels = c("Gaussian", "Gamma", "Poisson", "Quasi Poisson",
"Negative Binomial", "Binomial", "Multinomial"))
# Create a faceted text-based plot with boundary boxes for tiles and margins
ggplot(glm_links, aes(x = Link, y = ErrorStructure, label = DataExamples)) +
geom_tile(fill = "lightblue", color = "black", linewidth = 0.8, alpha = 0.5) + # Add boundary box to tiles
geom_text(size = 4) + # Add text annotations
labs(
title = "GLM Error Structures, Links, and Data Types",
x = "Link",
y = "Error Structure"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1), # Add margin boundary box
plot.margin = margin(10, 10, 10, 10) # Adjust margins if needed
)
# List of packages
packages <- c("sf", "dplyr", "ggplot2","tidyverse", "moderndive",
"ggfortify", "performance", "car", "skimr", "gridExtra", "broom",
"ggeffects", "tmap","MASS")
# Load all packages
lapply(packages, library, character.only = TRUE)
setwd("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Codefiles")
# Load data
bham_census <- read_csv("~/Dropbox/LgDatafiles/Teaching/Quant_meths/Data/Bham_21_census_dataglm.csv")
Birmingham_C21.shp <- st_read("~/Dropbox/LgDatafiles/Teaching/Quant_meths/Data/shapefiles/Birmingham_C21.shp")
# Combine the geopack to the csv file
bham_census_sf <- Birmingham_C21.shp %>%
left_join(bham_census, by = "LSOA21CD")
glimpse(bham_census_sf)
week_8_glm <- bham_census_sf %>% dplyr::select(LSOA21CD, Agebelow30,
DeprivL2to4,Unemployed,Occ_rating,White_pop,Qualification,geometry)
glimpse(week_8_glm)
skim(week_8_glm)
scatterplotMatrix(~ Unemployed +
Agebelow30 +
Qualification +
DeprivL2to4 +
Occ_rating,
col = "black",
diagonal = list(method = "qqplot"),
regLine = list(col = "blue", lwd = 2),   # Linear regression line in blue
smooth = list(col.smooth = "blue", lty.smooth = 2, lwd.smooth = 2), # Loess line in blue, dashed
data = week_8_glm)
# code updated to tmap v.4
tm_shape(week_8_glm) +
tm_polygons(
fill = "Unemployed",
fill.scale = tm_scale_intervals(values = "brewer.greens", style = "jenks"),
fill.legend = tm_legend(title = "Number of Unemployment people", title.size = 0.8)) +
tm_borders(
col = "lightgray",    # Set border color to light gray
lwd = 0.5) +             # Set border line width
tm_layout(legend.outside = TRUE)
M1 <- glm(Unemployed ~ Occ_rating +
Agebelow30 + DeprivL2to4 +
Qualification,
data = week_8_glm, family="poisson")
summary(M1)
beta <- coef(M1)
expB <- exp(beta)
odds_diff <- (expB-1)
chan <- (odds_diff)*100
chan
null_deviance <- M1$null.deviance #
residual_deviance <- M1$deviance
proportion_explained <- (null_deviance - residual_deviance) / null_deviance
# Print result
cat("Proportion of Deviance Explained:", proportion_explained, "\n")
check_overdispersion(M1)
dispersion_stat <- sum(residuals(M1, type = "pearson")^2) / M1$df.residual
cat("Dispersion Statistic:", dispersion_stat, "\n")
gvif_values <- car::vif(M1)
print(gvif_values)
# Calculate scaled GVIFs for interpretation
scaled_gvif <- gvif_values^(1 / (2 * attr(gvif_values, "df")))
print(scaled_gvif)
# Output
cat("Scaled GVIF values indicate the degree of multicollinearity.\n")
M1.1 <- glm(Unemployed ~ Occ_rating +
Agebelow30 + DeprivL2to4 +
Qualification,
data = week_8_glm, family="quasipoisson")
summary(M1.1)
null_deviance <- M1.1$null.deviance #
residual_deviance <- M1.1$deviance
proportion_explained <- (null_deviance - residual_deviance) / null_deviance
# Print result
cat("Proportion of Deviance Explained:", proportion_explained, "\n")
## simulate residuals
autoplot(M1.1, method="glm")
## plot simulated residuals
plot(M1.1, which=4)
pres <- residuals.glm(M1.1, type="pearson") # strip the residuals
#plot against the predictor variables in a panel plot
par(mfrow = c(2, 2))  # Set 3 rows and 2 columns
plot(pres ~ week_8_glm$Agebelow30)
plot(pres ~ week_8_glm$Occ_rating)
plot(pres ~ week_8_glm$DeprivL2to4)
plot(pres ~ week_8_glm$Qualification)
par(mfrow = c(1, 1))
# Create dataset for partial effect
partial_data <- data.frame(
Occ_rating = seq(min(week_8_glm$Occ_rating),
max(week_8_glm$Occ_rating), length.out = 100),
Agebelow30 = mean(week_8_glm$Agebelow30, na.rm = TRUE),
DeprivL2to4 = mean(week_8_glm$DeprivL2to4, na.rm = TRUE),
Qualification = mean(week_8_glm$Qualification, na.rm = TRUE)
)
# Predict response and confidence intervals
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
# Plot the partial effect - we store it in an object so we can use it later
p1 <- ggplot(partial_data, aes(x = Occ_rating, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Occupancy Levels on Unemployment totals",
x = "Number of residents living in crowded housing", y = "Predicted Unemployed")
p1
# Create dataset for partial effect
partial_data <- data.frame(
Qualification = seq(min(week_8_glm$Qualification),
max(week_8_glm$Qualification), length.out = 100),
Agebelow30 = mean(week_8_glm$Agebelow30, na.rm = TRUE),
DeprivL2to4 = mean(week_8_glm$DeprivL2to4, na.rm = TRUE),
Occ_rating = mean(week_8_glm$Occ_rating, na.rm = TRUE)
)
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
p2 <- ggplot(partial_data, aes(x = Qualification, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Qualification Level on Unemployment totals",
x = "Number of Residents with higher qualifications", y = "Predicted Unemployed")
p2
partial_data <- data.frame(
Agebelow30 = seq(min(week_8_glm$Agebelow30),
max(week_8_glm$Agebelow30), length.out = 100),
Qualification = mean(week_8_glm$Qualification, na.rm = TRUE),
DeprivL2to4 = mean(week_8_glm$DeprivL2to4, na.rm = TRUE),
Occ_rating = mean(week_8_glm$Occ_rating, na.rm = TRUE)
)
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
p3 <- ggplot(partial_data, aes(x = Agebelow30, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Age on Unemployment totals",
x = "Number of residents under 30 years old (Yrs)", y = "Predicted Unemployed (Total per LSOA")
p3
partial_data <- data.frame(
DeprivL2to4 = seq(min(week_8_glm$DeprivL2to4),
max(week_8_glm$DeprivL2to4), length.out = 100),
Qualification = mean(week_8_glm$Qualification, na.rm = TRUE),
Agebelow30 = mean(week_8_glm$Agebelow30, na.rm = TRUE),
Occ_rating = mean(week_8_glm$Occ_rating, na.rm = TRUE)
)
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
p4 <- ggplot(partial_data, aes(x = DeprivL2to4, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Resident poverty on Unemployment totals",
x = "Number of resident living in poverty", y = "Predicted Unemployed")
p4
grid.arrange(p1,p2,p3,p4,ncol =2)
# Create a data frame of error structures, links, and data types
library(ggplot2)
glm_links <- data.frame(
ErrorStructure = c("Gaussian", "Gamma", "Poisson", "Quasi Poisson", "Negative Binomial", "Binomial", "Multinomial"),
Link = c("Identity", "Inverse", "Log", "Log", "Log", "Logit", "Logit"),
DataExamples = c(
"Continuous",
"Continuous",
"Count",
"Count",
"Count",
"Binary",
"Categorical"
),
DataType = c("Continuous", "Continuous", "Count", "Count", "Count", "Binary", "Categorical")
)
# Reorder levels
glm_links$ErrorStructure <- factor(glm_links$ErrorStructure,
levels = c("Gaussian", "Gamma", "Poisson", "Quasi Poisson",
"Negative Binomial", "Binomial", "Multinomial"))
# Create a faceted text-based plot with boundary boxes for tiles and margins
ggplot(glm_links, aes(x = Link, y = ErrorStructure, label = DataExamples)) +
geom_tile(fill = "lightblue", color = "black", linewidth = 0.8, alpha = 0.5) + # Add boundary box to tiles
geom_text(size = 4) + # Add text annotations
labs(
title = "GLM Error Structures, Links, and Data Types",
x = "Link",
y = "Error Structure"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1), # Add margin boundary box
plot.margin = margin(10, 10, 10, 10) # Adjust margins if needed
)
# Create a data frame of error structures, links, and data types
library(ggplot2)
glm_links <- data.frame(
ErrorStructure = c("Gaussian", "Gamma", "Poisson", "Quasi Poisson", "Negative Binomial", "Binomial", "Multinomial"),
Link = c("Identity", "Inverse", "Log", "Log", "Log", "Logit", "Logit"),
DataExamples = c(
"Continuous",
"Continuous",
"Count",
"Count",
"Count",
"Binary",
"Categorical"
),
DataType = c("Continuous", "Continuous", "Count", "Count", "Count", "Binary", "Categorical")
)
# Reorder levels
glm_links$ErrorStructure <- factor(glm_links$ErrorStructure,
levels = c("Gaussian", "Gamma", "Poisson", "Quasi Poisson",
"Negative Binomial", "Binomial", "Multinomial"))
# Create a faceted text-based plot with boundary boxes for tiles and margins
ggplot(glm_links, aes(x = Link, y = ErrorStructure, label = DataExamples)) +
geom_tile(fill = "lightblue", color = "black", linewidth = 0.8, alpha = 0.5) + # Add boundary box to tiles
geom_text(size = 4) + # Add text annotations
labs(
title = "GLM Error Structures, Links, and Data Types",
x = "Link",
y = "Error Structure"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1), # Add margin boundary box
plot.margin = margin(10, 10, 10, 10) # Adjust margins if needed
)
# List of packages
packages <- c("sf", "dplyr", "ggplot2","tidyverse", "moderndive",
"ggfortify", "performance", "car", "skimr", "gridExtra", "broom",
"ggeffects", "tmap","MASS")
# Load all packages
lapply(packages, library, character.only = TRUE)
setwd("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Codefiles")
# Load data
bham_census <- read_csv("~/Dropbox/LgDatafiles/Teaching/Quant_meths/Data/Bham_21_census_dataglm.csv")
Birmingham_C21.shp <- st_read("~/Dropbox/LgDatafiles/Teaching/Quant_meths/Data/shapefiles/Birmingham_C21.shp")
# Combine the geopack to the csv file
bham_census_sf <- Birmingham_C21.shp %>%
left_join(bham_census, by = "LSOA21CD")
glimpse(bham_census_sf)
week_8_glm <- bham_census_sf %>% dplyr::select(LSOA21CD, Agebelow30,
DeprivL2to4,Unemployed,Occ_rating,White_pop,Qualification,geometry)
glimpse(week_8_glm)
skim(week_8_glm)
scatterplotMatrix(~ Unemployed +
Agebelow30 +
Qualification +
DeprivL2to4 +
Occ_rating,
col = "black",
diagonal = list(method = "qqplot"),
regLine = list(col = "blue", lwd = 2),   # Linear regression line in blue
smooth = list(col.smooth = "blue", lty.smooth = 2, lwd.smooth = 2), # Loess line in blue, dashed
data = week_8_glm)
# code updated to tmap v.4
tm_shape(week_8_glm) +
tm_polygons(
fill = "Unemployed",
fill.scale = tm_scale_intervals(values = "brewer.greens", style = "jenks"),
fill.legend = tm_legend(title = "Number of Unemployment people", title.size = 0.8)) +
tm_borders(
col = "lightgray",    # Set border color to light gray
lwd = 0.5) +             # Set border line width
tm_layout(legend.outside = TRUE)
M1 <- glm(Unemployed ~ Occ_rating +
Agebelow30 + DeprivL2to4 +
Qualification,
data = week_8_glm, family="poisson")
summary(M1)
beta <- coef(M1)
expB <- exp(beta)
odds_diff <- (expB-1)
chan <- (odds_diff)*100
chan
null_deviance <- M1$null.deviance #
residual_deviance <- M1$deviance
proportion_explained <- (null_deviance - residual_deviance) / null_deviance
# Print result
cat("Proportion of Deviance Explained:", proportion_explained, "\n")
check_overdispersion(M1)
dispersion_stat <- sum(residuals(M1, type = "pearson")^2) / M1$df.residual
cat("Dispersion Statistic:", dispersion_stat, "\n")
gvif_values <- car::vif(M1)
print(gvif_values)
# Calculate scaled GVIFs for interpretation
scaled_gvif <- gvif_values^(1 / (2 * attr(gvif_values, "df")))
print(scaled_gvif)
# Output
cat("Scaled GVIF values indicate the degree of multicollinearity.\n")
M1.1 <- glm(Unemployed ~ Occ_rating +
Agebelow30 + DeprivL2to4 +
Qualification,
data = week_8_glm, family="quasipoisson")
summary(M1.1)
null_deviance <- M1.1$null.deviance #
residual_deviance <- M1.1$deviance
proportion_explained <- (null_deviance - residual_deviance) / null_deviance
# Print result
cat("Proportion of Deviance Explained:", proportion_explained, "\n")
## simulate residuals
autoplot(M1.1, method="glm")
## plot simulated residuals
plot(M1.1, which=4)
pres <- residuals.glm(M1.1, type="pearson") # strip the residuals
#plot against the predictor variables in a panel plot
par(mfrow = c(2, 2))  # Set 3 rows and 2 columns
plot(pres ~ week_8_glm$Agebelow30)
plot(pres ~ week_8_glm$Occ_rating)
plot(pres ~ week_8_glm$DeprivL2to4)
plot(pres ~ week_8_glm$Qualification)
par(mfrow = c(1, 1))
# Create dataset for partial effect
partial_data <- data.frame(
Occ_rating = seq(min(week_8_glm$Occ_rating),
max(week_8_glm$Occ_rating), length.out = 100),
Agebelow30 = mean(week_8_glm$Agebelow30, na.rm = TRUE),
DeprivL2to4 = mean(week_8_glm$DeprivL2to4, na.rm = TRUE),
Qualification = mean(week_8_glm$Qualification, na.rm = TRUE)
)
# Predict response and confidence intervals
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
# Plot the partial effect - we store it in an object so we can use it later
p1 <- ggplot(partial_data, aes(x = Occ_rating, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Occupancy Levels on Unemployment totals",
x = "Number of residents living in crowded housing", y = "Predicted Unemployed")
p1
# Create dataset for partial effect
partial_data <- data.frame(
Qualification = seq(min(week_8_glm$Qualification),
max(week_8_glm$Qualification), length.out = 100),
Agebelow30 = mean(week_8_glm$Agebelow30, na.rm = TRUE),
DeprivL2to4 = mean(week_8_glm$DeprivL2to4, na.rm = TRUE),
Occ_rating = mean(week_8_glm$Occ_rating, na.rm = TRUE)
)
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
p2 <- ggplot(partial_data, aes(x = Qualification, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Qualification Level on Unemployment totals",
x = "Number of Residents with higher qualifications", y = "Predicted Unemployed")
p2
partial_data <- data.frame(
Agebelow30 = seq(min(week_8_glm$Agebelow30),
max(week_8_glm$Agebelow30), length.out = 100),
Qualification = mean(week_8_glm$Qualification, na.rm = TRUE),
DeprivL2to4 = mean(week_8_glm$DeprivL2to4, na.rm = TRUE),
Occ_rating = mean(week_8_glm$Occ_rating, na.rm = TRUE)
)
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
p3 <- ggplot(partial_data, aes(x = Agebelow30, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Age on Unemployment totals",
x = "Number of residents under 30 years old (Yrs)", y = "Predicted Unemployed (Total per LSOA")
p3
partial_data <- data.frame(
DeprivL2to4 = seq(min(week_8_glm$DeprivL2to4),
max(week_8_glm$DeprivL2to4), length.out = 100),
Qualification = mean(week_8_glm$Qualification, na.rm = TRUE),
Agebelow30 = mean(week_8_glm$Agebelow30, na.rm = TRUE),
Occ_rating = mean(week_8_glm$Occ_rating, na.rm = TRUE)
)
predictions <- predict(M1.1, newdata = partial_data, type = "response", se.fit = TRUE)
partial_data$predicted <- predictions$fit
partial_data$lower_ci <- predictions$fit - 1.96 * predictions$se.fit
partial_data$upper_ci <- predictions$fit + 1.96 * predictions$se.fit
p4 <- ggplot(partial_data, aes(x = DeprivL2to4, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "blue") +
labs(title = "Partial Effect of Resident poverty on Unemployment totals",
x = "Number of resident living in poverty", y = "Predicted Unemployed")
p4
grid.arrange(p1,p2,p3,p4,ncol =2)
