xlab = list("Root biomass (mm)", cex = 1.2),
ylab = list("Fruit Production (kg)", cex = 1.2))
# Now add a legend
legend(5, 115, legend = c("Grazed", "Ungrazed"),
col = c("black", "red"), pch = 19)
# add ablines....using coefficients - coeff()
abline(coef(Compensation.lm)[1], coef(Compensation.lm)[3])
# Now add the summer regression line
abline(coef(Compensation.lm)[1] + coef(Compensation.lm)[2],
coef(Compensation.lm)[3] + coef(Compensation.lm)[4],
col = "red")
xs <- seq(0, 12, l = 100)
plot(Fruit ~ Root, data = Compensation, xlab = "Root biomass (mm)", ylab = "Fruit Production (kg)")
# Plot the points and predicted trends (using se)
points(Fruit ~ Root, data = Compensation, subset = Grazing == "Grazed", pch = 19)
pred <- predict(Compensation.lm, type = "response", se = TRUE, newdata = data.frame(Root = xs, Grazing = "Grazed", Root = mean(Compensation$Root)))
lines(pred$fit ~ xs)
points(Fruit ~ Root, data = Compensation, subset = Grazing == "Ungrazed", pch = 19, col = "red")
pred <- predict(Compensation.lm, type = "response", se = TRUE, newdata = data.frame(Root = xs, Grazing = "Ungrazed", Root = mean(Compensation$Root)))
lines(pred$fit ~ xs, col = "red")
legend("topleft", legend = c("Grazed", "Ungrazed"), pch = c(19, 19), col = c("red","black"), title = "Fruit Production", bty = "n")
box(bty = "l")
ggplot(Compensation, aes(x=Root, y=Fruit, color=factor(Grazing))) +
geom_point() +
geom_smooth(method=lm)
# Load file (file is in Dropbox; Teaching material; Courses...)
Ozone <- read.csv(file.choose(), header = TRUE)
# look at data structure
str(Ozone)
head(Ozone)
# look at data structure
str(Ozone)
head(Ozone)
# Draw pictures to explore it....
# Boxplots - normality
op <- par(mfrow = c(2,2))
boxplot(Ozone$ozone, ylab="Ozone")
boxplot(Ozone$rad, ylab = "Solar Radiation")
boxplot(Ozone$wind, ylab = "Wind")
boxplot(Ozone$temp, ylab = "Temperature")
# relationships between response and explanatories
library(car)
scatterplotMatrix(~ozone + rad + wind + temp, data = Ozone, diagonal = list(method = "qqplot")) # use qqplot not boxplot
M1 <- lm(ozone ~ rad * wind * temp, data = Ozone)
# look at summary
summary(M1)
vif(lm(ozone ~ rad * wind * temp, data = Ozone))
vif(lm(ozone ~ rad + wind + temp+ wind:temp, data = Ozone))
vif(lm(ozone ~ rad + temp + wind:temp, data = Ozone))
M2
#validate
op <- par(mfrow = c(2,2))
plot(M2)
par(op)
#validate
op <- par(mfrow = c(2,2))
plot(M2)
M2 <- lm(ozone ~ rad + temp + wind:temp, data = Ozone)
#validate
op <- par(mfrow = c(2,2))
plot(M2)
library(MuMIn)
options(na.action=na.fail)
M3 <- model.avg(dredge(M2, rank = "AICc")) # code introduces model.avg(), get.models and dredge functions
options(na.action = "na.omit") # reset base R options
summary(M3)
M4 <- lm(log10(ozone) ~ rad + temp + wind:temp, data = Ozone)
op <- par(mfrow = c(2,2))
plot(M4)
par(op)
op <- par(mfrow = c(2,2)) # We cannot use the exponents here!
plot(M4$resid ~ Ozone$rad) 	# Looks okay
plot(M4$resid ~ Ozone$temp)	# Looks okay
plot(M4$resid ~ Ozone$wind)	# Looks okay
# NOTE: you'll get a very similar outcome if you model without the interaction. And no one would complain!
M5 <- lm(log10(ozone) ~ rad + temp + wind, data = Ozone)
op <- par(mfrow = c(2,2))
plot(M5)
# lowest AIC makes some sense:
AIC(M4,M5)
###################################################
###
###################################################
# use file.choose here....
mytilus <- read.csv(file.choose())
*********************************
# PART FOUR: CLASS EXERCISES      *
# *********************************
# PART ONE : POLYNOMIAL REGRESSION (you're combining model selection and polynomial regression here!)
# 	1. Use the mytilus.csv datafile (see Logan 2010 pp. 244-248;for data and analysis) :
#		(a) explore the data to look at its structure, normality;
#		(b) Assess its linearity (using the Car package - 'you've done this before');
#		(c) add in polynomial terms for the distance variable up to the 5th order (quintic model);
#		(d) validate the model. NOTE: 5 polynomials may overfit the model. Most biologists would have kittens over its use! What is the 		correct polynomial fit? That is compare the models.....
#		(e) create the predictive model and generate the regression equation.
# Data description: the data are Lap94 allele frequency data from mussels at increasing distances from Southport harbour
# Response is LAP
# Explanatory is DIST
#  IMPORTANT - fit a transformation to the response from the outset using an arcsin transformation  - arc(sqrt(LAP))
# the transformed code is Y in your regression equation.....
# load libraries
library(tidyverse)
library(mgcv)
library(car)
library(ggfortify)
library(MuMIn)
# Load the data
Veg <- read.csv(file.choose())
glimpse(Veg)
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# function end
# call pairplot
pairs(~R + ROCK + BARESOIL + LITTER + FallPrec +
SprTmax, data = Veg, panel = panel.smooth, upper.panel = panel.cor)
# Import the data
bolger <- read.csv(file.choose())
str(bolger)
head(bolger)
# Need CAR package
require(car)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diagonal = "boxplot", data=bolger)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diag = list(method = "boxplot", data=bolger)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diag = list(method = "boxplot", data=bolger)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diag = list(method = "boxplot", data=bolger)
)
str(bolger)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diag = list(method = "boxplot", data=bolger))
# Import the data
bolger <- read.csv(file.choose())
str(bolger)
head(bolger)
# Need CAR package
require(car)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diag = list(method = "boxplot", data=bolger))
str(bolger)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diag = list(method = "boxplot", data=bolger))
# Need CAR package
library(car)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, diag = list(method = "boxplot", data=bolger))
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, data=bolger))
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, data=bolger)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, data=bolger,diag = list(method = "boxplot"))
scatterplot(asin(sqrt(LAP))*180/pi ~DIST, data=mytilus)
plot(lm(asin(sqrt(LAP))*180/pi ~DIST, data=mytilus), which=1)
###################################################
### Fit 5th order polynomial
###################################################
mytilus.lm5<- lm(asin(sqrt(LAP))*180/pi ~ DIST + I(DIST^2) +I(DIST^3) + I(DIST^4) + I(DIST^5), mytilus)
###################################################
### Check diagnostic - no clear wedge; might be okay
###################################################
plot(mytilus.lm5, which=1)
summary(mytilus.lm5)
###################################################
### Examine contribution of powers to model. anything beyond cubic (3rd order) adds nothing..
###################################################
anova(mytilus.lm5)
###################################################
### respecify models and check whether quadratic is better
###################################################
mytilus.lm1<- lm(asin(sqrt(LAP))*180/pi ~DIST, mytilus)
mytilus.lm2<- lm(asin(sqrt(LAP))*180/pi ~DIST+I(DIST^2), mytilus)
anova(mytilus.lm2, mytilus.lm1)
mytilus.lm3<- lm(asin(sqrt(LAP))*180/pi ~DIST+I(DIST^2)+I(DIST^3), mytilus)
anova(mytilus.lm3, mytilus.lm2)
anova(mytilus.lm3, mytilus.lm2)
AIC(mytilus.lm1,mytilus.lm2,mytilus.lm3)
###################################################
### check model coefficients for plotting
########################
summary(mytilus.lm3)
###################################################
### plot graph
###################################################
plot(asin(sqrt(LAP))*180/pi ~ DIST, data=mytilus,pch=16, axes=F, xlab="", ylab="")
axis(1, cex.axis=.8)
mtext(text=expression(paste("Miles east of Southport, Connecticut")), side=1, line=3)
axis(2, las=1)
mtext(text=expression(paste("Arcsin ",sqrt(paste("freq. of allele ", italic("Lap"))^{94}))), side=2, line=3)
x<-seq(0,80,l=1000)
points(x,predict(mytilus.lm3, data.frame(DIST=x)), type="l")
box(bty="l")
# plotting using ggplot
ggplot(mytilus, aes(x = DIST , y = asin(sqrt(LAP))*180/pi)) + geom_point() + geom_smooth() +
labs(x = "Miles east of Southport, Connecticut",
y = expression(paste("Arcsin ",sqrt(paste("freq. of allele ", italic("Lap"))^{94}))))+
theme_bw()
scatterplot(eruptions ~ waiting, data = faithful)
# we use a glm with a guassian error structure because we'll run a gam too
M1 <- glm(eruptions ~ waiting, family = gaussian, data = faithful)
# look at it
summary(M1)
# validate
op <- par(mfrow = c(2, 2))
plot(M1)
par(op)
# validate
op <- par(mfrow = c(2, 2))
plot(M1)
# validate
op <- par(mfrow = c(2, 2))
plot(M1)
# validate
op <- par(mfrow = c(2, 2))
plot(M1)
# validate
op <- par(mfrow = c(2, 2))
plot(M1)
# uses mcgv package
M2 <- gam(eruptions ~ s(waiting), family = gaussian, data = faithful)
# look at the smoother....
plot(M2) # indicates nonlinearity
# validate
gam.check(M2) # pretty good
# uses mcgv package
M2 <- gam(eruptions ~ waiting, family = gaussian, data = faithful)
# look at the smoother....
plot(M2) # indicates nonlinearity
summary(M2)
# uses mcgv package
M2 <- gam(eruptions ~ s(waiting), family = gaussian, data = faithful)
summary(M2)
# look at the smoother....
plot(M2) # indicates nonlinearity
# compare models using AIC
AIC(M1,M2)
glimpse(Veg)
# - if you need it for a scatterMatrixplot in car
# Check for covariation
scatterplotMatrix(~R + ROCK + BARESOIL + LITTER + FallPrec +
SprTmax, data = Veg, diag = list(method = "boxplot"))
# Check for covariability ahead of model creation
vif(lm(R ~ ROCK + BARESOIL + LITTER + FallPrec +
SprTmax, data = Veg))
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# - if you need it for a scatterMatrixplot in car
# Check for covariation
scatterplotMatrix(~R + ROCK + BARESOIL + LITTER + FallPrec +
SprTmax, data = Veg, diag = list(method = "boxplot"))
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# function end
# call pairplot
pairs(~R + ROCK + BARESOIL + LITTER + FallPrec +
SprTmax, data = Veg, panel = panel.smooth, upper.panel = panel.cor)
View(panel.cor)
# Pairplots for correlations
# little function to take correlation coefficients and print them on the top panel
# Function source: Zuur et al. (2009) - Mixed Models
panel.cor <- function(x, y, digits=1, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r1=cor(x,y,use="pairwise.complete.obs")
r <- abs(cor(x, y,use="pairwise.complete.obs"))
txt <- format(c(r1, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * r)
}
# function end
# call pairplot
pairs(~R + ROCK + BARESOIL + LITTER + FallPrec +
SprTmax, data = Veg, panel = panel.smooth, upper.panel = panel.cor)
# Run initial full model
M1 <- gam(R ~ s(ROCK, bs = "cs") + s(BARESOIL, bs = "cs") + s(LITTER, bs = "cs") + s(FallPrec, bs = "cs") + s(SprTmax, bs = "cs"), data = Veg)
# Check results
summary(M1)
# plot smoothers
op <- par(mfrow = c(2, 3))
plot(M1, residuals=TRUE) # extra code plots the residuals against the smoother.
op <- par(mfrow = c(2, 2))
gam.check(M1)
# Find best fitting model using model averaging via MuMIn
# set base R to allow na
options(na.action=na.fail) # set options in Base R concerning missing values
# run model
M2 <- model.avg(dredge(M1, rank = "AICc")) # code introduces model.avg(), get.models and dredge functions
summary(M2)
# Rerun model with reduced terms (covariables 1, 3,4,5) # excludes FallPrec
M3 <- gam(R ~ s(ROCK, bs = "cs") + s(BARESOIL, bs = "cs") + s(LITTER, bs = "cs") + s(SprTmax, bs = "cs"), data = Veg)
# validate the model
par(mfrow=c(2,2))
gam.check(M3)
#Check residuals against explanatories (all look pretty good):
op <- par(mfrow = c(2,2)) #
plot(M3$resid ~ Veg$ROCK) 	# Looks okay
plot(M3$resid ~ Veg$BARESOIL)	# Looks okay
plot(M3$resid ~ Veg$LITTER)	# Looks okay
plot(M3$resid ~ Veg$SprTmax)	# Looks okay
par(op)
# Plot the new smoother. Notice they do change....from M1 above.
op <- par(mfrow = c(2, 2))
plot(M3, residuals=TRUE) # extra code plots the residuals against the smoother.
str(bolger)
# Investigate collinearity with a scattermatrixlibrary(car)
scatterplotMatrix(~RODENTSP + DISTX + AGE + PERSHRUB, data=bolger,diag = list(method = "boxplot"))
bolger.glm <- glm(RODENTSP ~ DISTX + AGE + PERSHRUB, family = binomial, data = bolger)
vif(bolger.glm)
# Now estimate the dispersion parameter
bolger.glm$deviance/bolger.glm$df.resid
# Confirm log odds ratio linearity
crPlots(bolger.glm)
# Check for influential sample points
influence.measures(bolger.glm) # nothing too worrying here...but 19?
# graphically plot the Cooks distances
plot(bolger.glm, which = 4) # 19 is high but not 1.
# Look at the outcomes of the model. You've already run this.
summary(bolger.glm)
# Check the log odds ratio and interpret that..
## odds ratios and 95% CI
exp(coef(bolger.glm))
options(na.action=na.fail) # set options in Base R concerning missing values
summary(model.avg(dredge(bolger.glm), fit = TRUE, subset = TRUE))
# Best model only includes percentage shrub cover. Notice relative variable variance
options(na.action = "na.omit") # reset base R options
# Refit the best model
bolger.glm <- glm(RODENTSP ~ PERSHRUB, family = binomial, data = bolger)
summary(bolger.glm)
# Create the plot to summarise the relationship - use the predict function
# Calculate predicted values based on fitted model
xs<-seq(0,100,l=1000)
bolger.predict <- with(bolger, (predict(bolger.glm, type="response", se=T, newdata=data.frame(DISTX=mean(DISTX), AGE=mean(AGE), PERSHRUB=xs))))
# Create the plot to summarise the relationship - use the predict function
# Calculate predicted values based on fitted model
xs<-seq(0,100,l=1000)
bolger.predict <- with(bolger, (predict(bolger.glm, type="response", se=T, newdata=data.frame(DISTX=mean(DISTX), AGE=mean(AGE), PERSHRUB=xs))))
# The mean argument sets means for the non-significant terms as constant
# The response argument plots on the original scale as the it is a log link function
# Produce base plot
plot(RODENTSP~PERSHRUB, data=bolger, xlab=NA, ylab=NA, axes = FALSE, pch=16)
# Plot fitted model and 95% CI bands
points(bolger.predict$fit~xs, type="l", col="gray")
lines(bolger.predict$fit+bolger.predict$se.fit ~ xs, col="gray", type="l", lty=2)
lines(bolger.predict$fit-bolger.predict$se.fit ~ xs, col="gray", type="l", lty=2)
# Axes titles
mtext("Native rodent presence/absence", 2, line=3)
axis(2,las=2)
mtext("Percentage shrub cover",1, line=3)
axis(1)
box(bty="l")
