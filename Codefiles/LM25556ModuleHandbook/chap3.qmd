# Data exploration strategies using R

This week we are going to make a start on data visualisation and exploration. To do this we will use graphical techniques that visualize and transform to explore data in a systematic way, a task that statisticians call **exploratory data analysis**, or EDA for short.

Data exploration is an important and integral part of data analysis. The process is iterative and evaluative and may take several cycles until you in a position to finalise your analytical route (Fig. 3.1). If you read around this you will find that people suggest it is appropriate to spend `~ 50%` of your analytical time engaged in exploring your datasets to identify (sometimes hidden) issues.

本周我们将开始数据可视化和探索。为此，我们将使用可视化和转换的图形技术来系统地探索数据，统计学家称之为**探索性数据分析**，简称EDA。

数据探索是数据分析的重要组成部分。这个过程是迭代和评估性的，可能需要几个周期才能最终确定分析路线（图3.1）。如果你仔细阅读这篇文章，你会发现人们建议将**约50%**的分析时间用于探索数据集以识别（有时是隐藏的）问题是合适的。

```{r}
#| label: EDA cycle
#| echo: false
#| fig-cap: "**Fig. 3.1: The EDA cycle (after Ismay et al. 2025)**"

knitr::include_graphics("images/EDA_cycle.png")
```

Learning how to do this properly is long process, so today we will start with the basics which we will extend and reinforce in subsequent workshops. The aim is to use the ggplot2 package to do this work and we will use a range of different types of graphs to illustrate how to represent data structure and the relationship between columns of data in our dataframes. We will introduce you to elements of base R graphics as the workshops progress.

这是一个漫长的过程，所以我们将从基础知识入手，并在接下来的工作坊中不断扩展和巩固。我们的目标是使用 ggplot2 包来完成这项工作，并使用各种不同类型的图表来说明如何表示数据结构以及数据框中各列之间的关系。随着工作坊的进展，我们将向您介绍 R 图形的基本元素。

Statisticians (and all researchers by association if they use statistics) use visualization and transformation to explore their data in a systematic way. EDA is an iterative cycle where you:

-   Generate questions about your data.

-   Search for answers by visualizing, transforming, and evaluating your data.

-   Use what you learn to refine your questions and/or generate new questions.

统计学家（以及所有从事统计学研究的研究人员）会运用可视化和数据转换技术，系统地探索数据。统计学家称之为探索性数据分析，简称EDA。EDA是一个迭代循环，在这个过程中，您可以：

-   生成关于数据的问题。

-   通过可视化、数据转换和建模来寻找答案。

-   利用所学知识完善问题和/或生成新问题。

**Session Aim 会议目标** To understand the importance of data visualisation for data analysis. 了解数据可视化对于数据分析的重要性。

### Learning Outcomes

At the end of this workshop your will be able to use the `ggplot2` package for data visualisation with a range of types of graphics to examine your data in terms of:

-   Comparisons of variables

-   Examining data distributions and frequencies

-   Finding associations between variables

-   Identifying potential outliers

-   Creating high quality graphics

**Maxim of the day “Don’t start data analysis without exploring the data (graphically) first”**

在本研讨会结束时，您将能够使用**ggplot2**数据可视化软件包，并结合多种类型的图形来分析您的数据，具体如下：

-   变量比较

-   检查数据分布和频率

-   查找变量之间的关联

-   识别潜在异常值

-   创建高质量图形

**每日箴言“在开始数据分析之前，务必先（以图形方式）探索数据”**

## Thinking about visualisation

Before we proceed it is worth thinking about why we are producing the graphics and what makes a plot work well. Obviously, we use the packages to show the data, its structure and dependencies within and between the data items. In terms of thinking about how to develop the graphics / plots we need to:

-   Use graphic tools that help in the comparison of differences in the data that we believe are important;
-   Ensure our plots represent the magnitudes and data dependencies honestly and accurately;
-   Draw graphical elements clearly, minimizing clutter and redundant information;
-   Make the graphics easy to interpret via appropriate colour choices, scales, insets and so on.

在继续之前，我们有必要思考一下我们为什么要制作这些图表，以及如何才能让图表效果更好。显然，我们使用这些包来展示数据、数据结构以及数据项内部和之间的依赖关系。在思考如何开发图表/图表方面，我们需要.

-   使用图形工具来帮助比较我们认为重要的数据差​​异；
-   确保我们的图表真实准确地反映量级和数据依赖关系；
-   清晰地绘制图形元素，最大限度地减少混乱和冗余信息；
-   通过适当的颜色、比例、插图等，使图表易于理解。

## Load packages

```{r}
# List of packages
packages <- c("skimr","readxl","tidyverse","janitor")

# Load all packages and install the packages we have no previously installed on the system
lapply(packages, library, character.only = TRUE)
```

## Load data

We are going to use a run of different data sources to visualise today so we'll load each one at the point we need it.

## An introduction to ggplot2 (from the tidyverse package)

We are going to use ggplot2 for all our plotting in this module unless it is more difficult to do so (i.e. GIS type functions). As I mentioned R was created to generate excellent graphic so the functions in base R to this are extensive. My decision to use ggplot2 is base on its clear graphical structure or as Wickham et al. might say, its grammar of graphics. There is a whole book dedicated to this @Wickham2009. The third updated edition is freely available here should you wish to read it: https://ggplot2-book.org/.

It works by layering up components as shown below in Figure 3.2. This is a screenshot from @Wickham2023 i.e. the book list in the URL above. The text describes the elements better than I could.
除非比较困难（例如使用 GIS 类型的函数），否则我们将在本模块中使用 ggplot2 进行所有绘图。正如我所提到的，R 语言旨在生成出色的图形，因此 R 语言中拥有丰富的函数。我决定使用 ggplot2 是基于其清晰的图形结构，或者用 Wickham 等人的话来说，它的图形语法。有一本书专门介绍 ggplot2：

Wickham, H., Gentleman, R., Hornick, K. & Parmigiani, G. (2009) ggplot2：用于数据分析的优雅图形。Springer 出版社，纽约。

如果您想阅读，可以在此处免费获取第三版更新版本：https://ggplot2-book.org/

它的工作原理是将组件分层，如下图 2 所示。这是 Wickham 等人 (2024) 著作的屏幕截图，即上方 URL 中的书籍列表。文本对这些元素的描述比我能理解的要好。

Visually, in terms of the code structure, your command will looks like this (Fig. 3.3): 从代码结构上看，您的命令将如下所示（图 3.2）：

```{r}
#| label: fig-rstudio-object
#| echo: false
#| fig-cap: "**Fig. 3.2: ggplot layering of elements**"

knitr::include_graphics("images/ggplot_grammar.jpg")
```
```{r}
#| label: rstudio-syntax
#| echo: false
#| fig-cap: "**Fig. 3.4: The code syntax for a ggplot call)**"

knitr::include_graphics("images/ggplot_code.png")
```

Reading from left to write. All ggplots begin with the function call (in green), and we pull in the data with the `data=` argument. Next you layer the `geom_function`. This is the argument that selects the type of graphics (e.g. boxplot, histogram etc), and finally you map the aesthetics, `aes()` (i.e. the X and Y elements). There are other layer arguments for adding titles, captions, varying axes etc. We'll keep it simple to start with and expand the range of arguments as you become more experienced.

从左到右依次阅读。所有 ggplot 都以函数调用（绿色）开始，然后使用 **data=** 参数导入数据。接下来，对 geom_function 进行分层。该参数用于选择图形类型（例如箱线图、直方图等），最后绘制图形的视觉效果（即 X 和 Y 元素）。还有其他分层参数可用于添加标题、说明、不同的轴等。我们将从简单的开始，随着您经验的积累，逐步扩展参数的范围。

## Your first plot

We are going to create this plot. It is plot designed to show the variability in discharge metrics (mean daily flow, yearly discharge range) and river catchment size. What patterns does the plot show? **Spend a few minutes looking at it**.

我们将创建此图。该图旨在显示流量指标（平均日流量、年流量变化范围）和河流集水区大小的变化。该图显示了哪些模式？**请花几分钟时间查看**。

```{r}
#| label: hydro-plot
#| echo: false
#| fig-cap: "Figure 3.4: River discharge variability in relation to catchment size"

knitr::include_graphics("images/dischargePlot.png")
```

We'll start by creating a plot layer by layer so you can visualise what's happening. We will make a complex graphic but you don't need to understand all the details to start with.

我们将从逐层创建图表开始，以便您直观地了解正在发生的事情。我们会制作一个复杂的图形，但您无需了解所有细节即可开始。

We'll use some hydrological data. You need to load it. This is my directory structure, your paths will be different.

我们将使用一些水文数据。您需要加载它。这是我的目录结构，您的路径可能会有所不同。
```{r}
# Load data
data <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/Riv_hydrol.csv")
```

Let's look at it's structure. It is river flow (discharge) data from rivers with different catchment sizes. We use the `skim` function to do this.

我们来看看它的结构。它是来自不同流域大小的河流的流量（排放）数据。我们使用 `skim` 函数来执行此操作。
```{r}
skim(data)
```

Here is the first layer of the plot (Fig. 3.5). We have just added the data to ggplot so it just prints a canvas to receive it!

这是绘图的第一层（图 3.5）。我们刚刚将数据添加到 ggplot 中，因此它只需打印一个画布来接收数据即可！
```{r}
# create plot blank canvas
ggplot(data = data) # when run it we get a grey box in plot window (bottom left)
```

**Fig. 3.5: The ggplot canvas**.

Then we need some axes. These are mapped with the aesthetics argument, shortened to `aes`. x is the yearly range in discharges meansure in cumecs. y is the mean of daily discharge across the year (Fig. 3.6).


```{r}
ggplot(
  data = data,
  mapping = aes(x = Ran, y = Mean)
)
```

**Fig. 3.6: The axes are now in place. Notice it just returns the column name as a label. We can, of course, modify the axes labels**.

Next we need to add the data to the plot. We doe this by specifying the `geom.` Because the data are continuous and we are looking to compare one column against another, we need a scatterplot of some form. We use the `geom_point()` function to plot the dots (Fig. 3.7). We can change the type of dot, dot colour, dot size and fill type to improve the visual aesthetic in due course.

接下来，我们需要将数据添加到图中。我们通过指定“geom”来实现这一点。由于数据是连续的，并且我们希望比较各列之间的差异，因此我们需要绘制某种形式的散点图。我们使用“geom_point()”函数来绘制点（图 3.7）。我们可以更改点的类型、颜色、大小和填充类型，以提升视觉美感。
```{r}
ggplot(data, aes(x = Ran, y = Mean)) +
  geom_point(
  )
```

**Fig. 3.7: Adding some data points to the plot**.

You will recall out figure has effectively three dimensions, mean flow, the range of flow and we want to show catchment size influences. We do this by adding that data column to the `aes` function by specifying the `size` argument (Fig. 3.8).

你会记得，我们的图实际上有三个维度：平均流量、流量范围，以及我们想要展示的流域规模的影响。我们通过指定“size”参数，将该数据列添加到“aes”函数中来实现这一点（图 3.8）。
```{r}
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) + 
  geom_point(
  )
```

**Fig. 3.8: Adding catchment size to the plot**.

Notice the points are now scaled to represent the catchment size for each river. `ggplot` adds a legend to show the scale by default. We can modify this too. We now have our basic plot. We could stop here if we are just looking to visualise things but if we plan to use the figure in a report or paper we might want to make it look a little more professional. We'll start by adding some titles, enhanced labels and a caption with some nice textual features, i.e. superscripts and so on.

请注意，这些点现在已按比例缩放，以表示每条河流的流域大小。“ggplot”添加了一个图例，默认显示比例。我们也可以对其进行修改。现在，我们得到了基本的图表。如果我们只是想将事物可视化，可以就此打住；但如果我们计划在报告或论文中使用该图表，我们可能需要使其看起来更专业一些。我们将首先添加一些标题、增强标签和带有一些美观文本特征（例如上标等）的说明文字。
```{r}
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
  geom_point(
  ) +
  
# Set the axis labels here for clarity
  scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
  scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
  
# Add the labels, title, subtitle and caption. Note expression(paste) functions to add the superscript
  labs(
    title = "River Discharge Increases with Catchment Area", # main title
    subtitle = "A comparison of mean daily discharge across various rivers", # subtitle
    size = expression(paste("Catchment Area ", "(",km^2,")")), # this sorts out the caption title
    caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."  # caption 
  )  
```

**Fig. 3.9: Some titles, tidier labels and a caption**.

Now let's sort out the data points. You can see the points overlap and sit on top of each other. We can deal with that by changing the parameters that control, colour and opacity (Fig. 3.10).

现在让我们整理一下数据点。您可以看到这些点重叠在一起。我们可以通过更改控制参数（颜色和不透明度）来解决这个问题（图 3.10）。
```{r}
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
  geom_point(
    shape = 21, # shape 21 is a circle but we are going to remove the default theme so we specify it.
    colour = "grey30", # change the outline of the points to light grey 
    fill = "#4682B4", # change the point colour to light blue
    alpha = 0.7 # Modify the opacity to make it more translucent
  ) +
# Set the axis labels here for clarity
  scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
  scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
  
# Add the labels, title, subtitle and caption. Note expression(paste) functions to add the superscript
  labs(
    title = "River Discharge Increases with Catchment Area", # main title
    subtitle = "A comparison of mean daily discharge across various rivers", # subtitle
    size = expression(paste("Catchment Area ", "(",km^2,")")), # this sorts out the caption title
    caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."  # caption 
  )  
```

**Fig. 3.10: Points are coloured and the opacity is lowered so point overlaps are visible**.

To conclude and clean the visualisation, we are going to change the margins of the plot, set the limits, stop the clipping, remove the default grey background, place the legend across the top and set a base font size. It's a lot of functions but don't worry about holding on to all of it now. We'll revisit things every week to reinforce the learning.

为了完成并清理可视化效果，我们将更改绘图的边距、设置界限、停止裁剪、移除默认的灰色背景、将图例放置在顶部并设置基本字体大小。函数比较多，但不必担心现在就记住所有函数。我们每周都会复习一遍，以巩固所学内容。
```{r}
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
  geom_point(
    shape = 21, # shape 21 is a circle but we are going to remove the default theme so we specify it.
    colour = "grey10", # change the outline of the points to light grey 
    fill = "#4682B4", # change the point colour to light blue
    alpha = 0.7 # Modify the opacity to make it more translucent
  ) +
  scale_size_area(max_size = 12) +
  
  # Set the axis labels
  scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
  scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
 
  # Add the labels. Note expression(paste) functions to add the superscript
  labs(
    title = "River Discharge Increases with Catchment Area",
    subtitle = "A comparison of mean daily discharge across various rivers",
    size = expression(paste("Catchment Area ", "(",km^2,")")),
    caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."
  ) +
  
  # Use coord_cartesian to set the viewport, start axes at 0, and turn off clipping.
  coord_cartesian(
    xlim = c(0, 600), # sets X axis limits
    ylim = c(0, 60), # sets Y axis limits
    expand = FALSE,  # This creates the tight axis look, starting at 0
    clip = "off"     # This allows points to be drawn outside the panel
  ) +
  
  theme_bw(base_size = 14) + # change the theme from default to black and white. Set base font size to 14
  theme(
    panel.grid.minor = element_blank(), #remove the minor grids
    panel.border = element_blank(), # remove the plot border
    axis.line = element_line(colour = "grey50"), #Change axis line colour to grey
    plot.title.position = "plot", # aligns title to far left margin of the full plot. Change 'plot' to 'panel' to see the difference.
    plot.caption.position = "plot", # as above
    plot.caption = element_text(hjust = 0, color = "grey60"), # aligns the caption to the far left (hjust = 0) i.e. no left padding. Sets text colour to mid grey.
    legend.position = "top", # place the legend on the top from the right hand size
    # Add a little margin to the whole plot to ensure there's room
    plot.margin = margin(10, 15, 10, 10) # Specify margins around the plot. Top, Right, Bottom, Left
  )
```

**Fig. 3.11: The final version**.

```{r, include=FALSE}
# 
plot <- ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
  geom_point(
    shape = 21, # shape 21 is a circle but we are going to remove the default theme so we specify it.
    colour = "grey10", # change the outline of the points to light grey 
    fill = "#4682B4", # change the point colour to light blue
    alpha = 0.7 # Modify the opacity to make it more translucent
  ) +
  scale_size_area(max_size = 12) +
  
  # Set the axis labels
  scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
  scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
 
  # Add the labels. Note expression(paste) functions to add the superscript
  labs(
    title = "River Discharge Increases with Catchment Area",
    subtitle = "A comparison of mean daily discharge across various rivers",
    size = expression(paste("Catchment Area ", "(",km^2,")")),
    caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."
  ) +
  
  # Use coord_cartesian to set the viewport, start axes at 0, and turn off clipping.
  coord_cartesian(
    xlim = c(0, 600), # sets X axis limits
    ylim = c(0, 60), # sets Y axis limits
    expand = FALSE,  # This creates the tight axis look, starting at 0
    clip = "off"     # This allows points to be drawn outside the panel
  ) +
  
  theme_bw(base_size = 14) + # change the theme from default to black and white. Set base font size to 14
  theme(
    panel.grid.minor = element_blank(), #remove the minor grids
    panel.border = element_blank(), # remove the plot border
    axis.line = element_line(colour = "grey50"), #Change axis line colour to grey
    plot.title.position = "plot", # aligns title to far left margin of the full plot. Change 'plot' to 'panel' to see the difference.
    plot.caption.position = "plot", # as above
    plot.caption = element_text(hjust = 0, color = "grey60"), # aligns the caption to the far left (hjust = 0) i.e. no left padding. Sets text colour to mid grey.
    legend.position = "top", # place the legend on the top from the right hand size
    # Add a little margin to the whole plot to ensure there's room
    plot.margin = margin(10, 15, 10, 10) # Specify margins around the plot. Top, Right, Bottom, Left
  )

# print the plot
plot

# Save plot to file
ggsave(plot, file = "~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Codefiles/LM25556ModuleHandbook/images/dischargePlot.png", width = 8, height = 4) # units are centimeters
```

## Exploratory Data Analysis (EDA)

### Displaying frequencies and distributions of variables

We need to use these to establish how our data are structured. This allows us to see whether data conform to to a normal distribution, which is an important criterion for the use of parametric techniques e.g. ANOVA, standard T-test and linear regression. We are going to use three plot types: histograms, Quantile-Quantile Plots (or Q-Q plots) and boxplots. The data are air pollution data and the file is called **airpollution.csv**. It is in your 'data' folder; add 'your' path the your 'data' folder into the code to locate the file.

我们需要用它们来确定数据的结构。这使我们能够判断数据是否符合正态分布，这是使用参数化技术（例如方差分析、标准T检验和线性回归）的重要标准。我们将使用三种绘图类型：直方图、分位数-分位数图（或Q-Q图）和箱线图。数据是空气污染数据，文件名为**airpollution.csv**。它位于您的“data”文件夹中；在代码中添加“您的”路径和“data”文件夹即可找到该文件。
```{r}
#load file
air <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/airpollution.csv")
```

Have a quick look at it.

```{r}
skim(air)
```

It has 336 rows and 2 columns: one is NOx levels and the other (respiratory particles) is the number of PM10 particles. Notice that the column names have spaces in them. We need to sort that out. We could just rename them using `colnames()` but we'll use the `janitor` package to do it for us with the function `clean_names()`. Note also there are missing values in the file, this has implications for visualisation using `ggplot.`

它有 336 行和 2 列：一列表示氮氧化物 (NOx) 水平，另一列（呼吸性颗粒物）表示 PM10 颗粒物的数量。请注意，列名中有空格。我们需要解决这个问题。我们可以使用 `colnames()` 重命名它们，但我们将使用 `janitor` 包中的 `clean_names()` 函数来执行此操作。另请注意，文件中存在缺失值，这会对使用 `ggplot` 进行可视化产生影响。
```{r}
# sort out space is column names
air <- air %>% clean_names()
```

Look at the new names

```{r}
names(air)
```

#### Histograms

Histograms show how data is distributed by grouping values into intervals (bins) and displaying the frequency (count) of observations in each bin as bars. It helps visualize the shape, spread, and central tendency of a dataset. The code for a ggplot histogram uses the `geom_histogram()` function (Fig. 3.12). I will provide the base R code too, for reference (Fig. 3.13). See we are subsetting the data to remove the NAs or missing values with `!is.na()`. ggplot does not deal with `NAs`. We set the bin width to 20. **Have a ploy and change that value to see what happens.**.

直方图通过将值分组到区间（bin）中，并以条形显示每个bin中观测值的频率（计数），从而显示数据的分布情况。它有助于可视化数据集的形状、分布和集中趋势。ggplot 直方图的代码使用了 `geom_histogram()` 函数（图 3.12）。我还将提供基础 R 代码以供参考（图 3.13）。请注意，我们使用 `!is.na()` 对数据进行子集化，以移除 NA 值或缺失值。ggplot 不处理 NA 值。我们将 bin 宽度设置为 20。**想个办法，更改该值看看会发生什么。**
```{r}
ggplot(data=subset(air, !is.na(nitrogen_oxides)), aes(x=nitrogen_oxides)) + geom_histogram(binwidth=20)
# set binwidth = 20
# ggplot does not like NAs in the data for plots (see data file - there are 4 rows)
# To avoid the error message we use: data=subset(Air, !is.an(Nitrogen.Oxides)) to subset the rows with numbers
```

**Fig. 3.12: plot histogram**.

We can modify ggplot code to produce a tider outcome (Fig. 3.13). ggplot requires a little more coding effort for simple plots but comes into its own for complex, publication-standard plots, so in my view it is worth the initial investment in effort.

人们可以修改 ggplot 代码来产生更准确的结果（图 3.13）。ggplot 对于简单的图表需要更多的编码工作，但对于复杂的、出版标准的图表则能发挥它的作用，所以在我看来，它值得最初投入的努力。
```{r}
# Draw with black outline, grey fill
ggplot(data=subset(air, !is.na(nitrogen_oxides)),aes(x=nitrogen_oxides)) +
  geom_histogram(binwidth=20, colour="black", fill="grey90") +
  labs(x="Nitrogren Oxide levels") + # add a label
theme_bw() + # change dafualt scheme to black and white....this removes axes and other things!
 theme(
  panel.grid.minor = element_blank(), #remove the minor grids
  panel.grid.major = element_blank(), #remove the minor grids
  panel.border = element_blank(), # remove the plot border
  axis.line = element_line(colour = "black") # Add axis lines back for a cleaner look
 )
```

**Fig. 3.13: A tidier ggplot version**.

So what does this mean? We can see a number of things. First, on the right we so a number of bin counts that may be 'outliers' (we'll come back to that later). Second the data **right** or **positive** skewed so unlikely to be normally distributed. Right skew means there is a tail of higher values to the right and lump sits to the left (see Fig. 3.14 for more information). The plot in the middle is a classic bell-shaped normal curve. Pay attention to what's happening with the mean, median and mode!

那么这意味着什么呢？我们可以看出一些情况。首先，右侧有一些可能是“异常值”的箱体计数（我们稍后会讨论这个问题）。其次，数据**右**或**正**倾斜，因此不太可能呈正态分布。右倾斜意味着右侧有较高值的​​尾部，而左侧则有块状（更多信息请参见图 3.14）。中间的图是一条典型的钟形正态曲线。注意平均值、中位数和众数的变化！
```{r, echo = FALSE}
library(patchwork) # For arranging the final plots

# create symmetrical distribution (Normal)
sym_mean <- 0
sym_median <- 0
sym_mode <- 0
sym_peak <- dnorm(sym_mode, mean = sym_mean)

p_sym <- ggplot(data.frame(x = c(-4, 4)), aes(x = x)) +
  stat_function(fun = dnorm, n = 101) +
  annotate("segment", x = sym_mean, y = 0, xend = sym_mean, yend = sym_peak, linetype = "dashed") +
  
  # Adjust label position for the new y-axis
  annotate("text", x = sym_mean, y = sym_peak + 0.05, 
           label = "Mean\nMedian\nMode", lineheight = 0.8) +
           coord_cartesian(ylim = c(0, 0.6)) +
  labs(x = "\nSymmetrical\nDistribution")


# create positive skew (Gamma)
pos_shape <- 3
pos_rate <- 1
pos_mean <- pos_shape / pos_rate
pos_mode <- (pos_shape - 1) / pos_rate
pos_median <- qgamma(0.5, shape = pos_shape, rate = pos_rate)
pos_peak <- dgamma(pos_mode, shape = pos_shape, rate = pos_rate)

p_pos <- ggplot(data.frame(x = c(0, 10)), aes(x = x)) +
  stat_function(fun = dgamma, args = list(shape = pos_shape, rate = pos_rate), n = 101) +
  annotate("segment", x = pos_mean, y = 0, xend = pos_mean, yend = dgamma(pos_mean, shape=pos_shape, rate=pos_rate), linetype = "dashed") +
  annotate("segment", x = pos_median, y = 0, xend = pos_median, yend = dgamma(pos_median, shape=pos_shape, rate=pos_rate), linetype = "solid") +
  annotate("segment", x = pos_mode, y = 0, xend = pos_mode, yend = pos_peak, linetype = "solid") +
  annotate("text", x = pos_mean + 0.2, y = pos_peak * 0.8, label = "Mean", hjust = 0) +
  annotate("text", x = pos_median, y = pos_peak + 0.03, label = "Median", hjust = 0.5) +
  annotate("text", x = pos_mode - 0.2, y = pos_peak * 0.8, label = "Mode", hjust = 1) +

  # Keep the tighter ylim for the skewed plots
  coord_cartesian(ylim = c(0, 0.45)) +
  labs(x = "\nPositive\nSkew")


# Create negative Skew (Flipped Gamma)
neg_mean <- -pos_mean
neg_mode <- -pos_mode
neg_median <- -pos_median
neg_peak <- pos_peak

p_neg <- ggplot(data.frame(x = c(-10, 0)), aes(x = x)) +
  stat_function(fun = function(x) dgamma(-x, shape = pos_shape, rate = pos_rate), n = 101) +
  annotate("segment", x = neg_mean, y = 0, xend = neg_mean, yend = dgamma(-neg_mean, shape=pos_shape, rate=pos_rate), linetype = "dashed") +
  annotate("segment", x = neg_median, y = 0, xend = neg_median, yend = dgamma(-neg_median, shape=pos_shape, rate=pos_rate), linetype = "solid") +
  annotate("segment", x = neg_mode, y = 0, xend = neg_mode, yend = neg_peak, linetype = "solid") +
  annotate("text", x = neg_mean - 0.2, y = neg_peak * 0.8, label = "Mean", hjust = 1) +
  annotate("text", x = neg_median, y = neg_peak + 0.03, label = "Median", hjust = 0.5) +
  annotate("text", x = neg_mode + 0.2, y = neg_peak * 0.8, label = "Mode", hjust = 0) +

  # Keep the tighter ylim for the skewed plots
  coord_cartesian(ylim = c(0, 0.45)) +
  labs(x = "\nNegative\nSkew")


# Define a Common Theme for a Clean Look
theme_skew <- theme_classic() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_text(size = 14),
    axis.line.y = element_blank()
  )

# Combine the plots 
(p_pos + theme_skew) + (p_sym + theme_skew) + (p_neg + theme_skew)
```

**Fig. 3.14: Skewness patterns**.

### Q-Q plots

Another way to visual distributions in to use a Q-Q plot. A Q-Q plot, short for “quantile-quantile” plot, is used to assess whether or not a set of data potentially came from some theoretical distribution. In most cases, this type of plot is used to determine whether or not a set of data follows a normal distribution.

If the data are normally distributed, the points in a Q-Q plot will lie on a straight diagonal line. Conversely, if the points deviate significantly from the straight diagonal line, then it’s less likely that the data is normally distributed. We know from out histogram that our NOx data are skewed so it is unlikely to be normally distributed. We address why this might be important in later classes so don’t worry about it now.

In ggplot the we use you can use the stat_qq() and stat_qq_line() functions as follows (Fig. 2.15).

另一种可视化分布的方法是使用 Q-Q 图。Q-Q 图是“分位数-分位数”图的缩写，用于评估一组数据是否可能来自某种理论分布。在大多数情况下，这种类型的图用于确定一组数据是否遵循正态分布。

如果数据服从正态分布，则 Q-Q 图中的数据点将位于一条直对角线上。相反，如果数据点与直对角线的偏差较大，则数据服从正态分布的可能性较小。从我们的直方图中可以看出，我们的 NOx 数据存在偏斜，因此不太可能服从正态分布。我们将在后续课程中解释为什么这一点可能很重要，所以现在不用担心。

在我们使用的 ggplot 中，您可以使用 stat_qq() 和 stat_qq_line() 函数，如下所示（图 2.15）。
```{r}
# plot some qq-plots
ggplot(data=subset(air, !is.na(nitrogen_oxides)), aes(sample=nitrogen_oxides)) +
  stat_qq() + 
  stat_qq_line()
```

**Fig. 3.15: A Q-Q plot generated with ggplot**.

As we suspected from the histogram the data are not normally distributed or the points would sit on the line. You may be wondering what a normally distributed dataset might look like on a Q-Q plot. So we will simulate one with R (Fig. 3.16). **You do not need to understand the code that does this**.

正如我们从直方图中推测的那样，数据并非呈正态分布，否则点会位于直线上。您可能想知道正态分布的数据集在Q-Q图上会是什么样子。因此，我们将使用 R 进行模拟（图 3.16）。**您无需理解执行此操作的代码**。
```{r}
#make this example reproducible
set.seed(1)

#create some fake data that follows a normal distribution for 200 data points
df <- data.frame(col=rnorm(200))

#create Q-Q plot
ggplot(df, aes(sample=col)) +
  stat_qq() + 
  stat_qq_line()
```

**Fig. 3.16: A normally distributed pattern on a Q-Q plot**.

Notice there is a bit of drift on the extremes but most of the data points sit on the line. We'll be seeing a lot of these as the module progresses because R's automated validation plots use Q-Q plots extensively.

请注意，极值处略有漂移，但大多数数据点都位于线上。随着模块的进展，我们会看到很多这样的数据点，因为 R 的自动验证图广泛使用 Q-Q 图。

## Boxplots

Boxplots (Fig. 3.17) are very useful for visualising the distribution of data. The black in the middle is the median (not the mean), the box around it shows the upper (3rd) quartile (75%) and the lower (1st) quartile (25%) and the whiskers or lines are the maxima and minima. The dots are potential outliers (Fig. 3.18). They may not be true outliers in the statistical sense. We’ll discover how to be sure of this in later workshops.

箱线图（图 3.17）对于可视化数据分布非常有用。中间的黑色区域表示中位数（而非平均值），周围的框表示上四分位数（第三四分位数）（75%）和下四分位数（第一四分位数）（25%），晶须或线表示最大值和最小值。图中的点是潜在的异常值（图 3.18）。它们可能并非统计学意义上的真正异常值。我们将在后续的研讨会中探讨如何确定这一点。
```{r}
#create a boxplot
ggplot(air, aes(x = 1, y = nitrogen_oxides)) + # Note I left the !is.na() element out and ggplot gives you a prod telling you 4 four rows are being removed.
  geom_boxplot() +
  scale_x_continuous(breaks = NULL) # we need this new code otherwise R will add a 'fake' x axis!
```

**Fig. 3.17: Boxplot of air quality data. See the offset median and potential outlier points**.

```{r}
#| label: boxplot explanation
#| echo: false
#| fig-cap: "**Fig. 3.18: Components of a boxplot**"

knitr::include_graphics("images/boxplot.png")
```

**Fig. 3.18: The elements of a boxplot named**.

For a normally distributed dataset the boxplot would be much more symetrical with the median central in the box and the whiskers balanced with side of it. You can see from the above there are more data points above the median, with some higher ones that sit above 1.5 times the interquartile range. For comparison, Figure 3.18 below is based on the data we simulated to fit a normal distribution.

对于正态分布的数据集，箱线图会更加对称，中位数位于箱线图的中心，晶须与箱线图的边线保持平衡。从上图可以看出，中位数以上的数据点更多，其中一些数据点甚至高于四分位距的 1.5 倍。为了进行比较，下图 3.18 是基于我们模拟拟合正态分布的数据绘制的。
```{r}
#create a boxplot
ggplot(df, aes(x = 1, y = col)) + 
  geom_boxplot() +
  scale_x_continuous(breaks = NULL) 
```

**Fig: 3.18: A normal distribution pattern in a boxplot**.

## Exploring mulitple variables

EDA comes into its own when the graphical techniques are used to explore multiple variables simultaneously. Type of plot used depends on the type of variable. There are lots of types of variables but to start with we will focus on: - `continuous variables` such as counts of organisms, weights of things, chemical parameters, temperature and so on. - `factors` or grouped variables, such as classes of age, quartiles of river flow, countries, months in a year and so on.

当使用图形技术同时探索多个变量时，EDA 便能大显身手。所用的绘图类型取决于变量的类型。变量的类型有很多，但首先我们将重点关注：- “连续变量”，例如生物数量、物体重量、化学参数、温度等等。- “因子”或分组变量，例如年龄组、河流流量四分位数、国家/地区、一年中的月份等等。

### Comparing two continous variables

Typically here were would be thinking of these in terms of a x and y comparison using a something like a scatterplot, this sort of thing underpins the ideas of linear regression, which we'll cover in week 4 of this module (chapter 4 of this module book). You have seen a complex example of this in Fig. 3.11 - the hydrology data set above. To explore this we'll use a data set based on benthic organisms captured on beaches in the Netherlands. The data are discussed in @Zuur2009.

通常，我们会用类似散点图的方法来比较 x 和 y 轴，这类图是线性回归的基础，我们将在本模块的第四周（本模块手册的第 4 章）讲解。您已经在图 3.11 中看到了一个复杂的例子——上面的水文数据集。为了探索这一点，我们将使用一个基于在荷兰海滩捕获的底栖生物的数据集。这些数据在 @Zuur2009 中进行了讨论。
```{r}
Benthic <- read.table("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/RIKZ.txt", header = TRUE) # It is tab delineated so we use read.table
```

Lets look at it.

```{r}
glimpse(Benthic)
skim(Benthic)
```

It has 5 variables and 45 rows.

-   Sample. This is the sample number identifier. Its class is *int*, or integer.
-   Richness. This is the number of benthic invertebrates counted in each sample. Its class is *int*, or integer and it is a continuous variable.
-   Exposure. This is....Its class is *int*, or integer. The repeated numbers suggest you could use it as a factor variable.
-   NAP. This is.....Its class is, *dbl* or double/decimal. It is a continuous variable and ranges from -1.33 to 2.255 (see the output from skim above).
-   Beach. This is....Its class is, *int* or integer. You can see the numbers are repeated and each repeated number is effectively a sample with a beach. We can figure out how many beaches there are by counting the number of unique values using the `unique()` function.

它包含 5 个变量和 45 行。

- 样本。这是样本编号标识符。其类型为 *int*，即整数。
- 丰富度。这是每个样本中计数的底栖无脊椎动物的数量。其类型为 *int*，即整数，它是一个连续变量。
- 暴露度。这是……其类型为 *int*，即整数。重复的数字表明您可以将其用作因子变量。
- 午睡。这是……其类型为 *dbl*，即双精度/小数。它是一个连续变量，范围从 -1.33 到 2.255（参见上面 skim 的输出）。
- 海滩。这是……其类型为 *int*，即整数。您可以看到这些数字是重复的，每个重复的数字实际上都是一个包含海滩的样本。我们可以通过使用 `unique()` 函数计算唯一值的数量来计算海滩的数量。
```{r}
unique(Benthic$Beach) # there are 9 beaches 
```

There are nine beaches, each with 5 repeated samples, so 9 x 5 = 45 (the number of rows in the dataframe). We can use scatterplots to look at the relationship between our continuous variables. We might want to know how Richness is related to NAP. We will use the ggplot defaults because we are quickly assessing the data (Fig. 3.19).

有九个海滩，每个海滩有 5 个重复样本，因此 9 x 5 = 45（数据框中的行数）。我们可以使用散点图来查看连续变量之间的关系。我们可能想知道丰富度与 NAP 之间的关系。我们将使用 ggplot 的默认值，因为我们需要快速评估数据（图 3.19）。
```{r}
ggplot(Benthic, aes(x = NAP, y = Richness)) +
  geom_point(
  )
```

**Fig. 3.19: Scatterplot showing the relationship between benthic invertebrates (Richness) and the NAP variable**.

We can see two clear patterns on this plot: - Firstly, as NAP increases, species richness of beach invertebrates decreases. - Second, and more subtle, there is a decrease in the variability of benthic richness as NAP increase. See how the way the points pinch out along the x axis?

If we want to know a little more about the shape of this relationship we can add a regression or best fit line to the plot with by adding one more `geom`, namely `geom_smooth()`. We'll jazz this plot up a little (Fig. 3.20).

我们可以从这张图上看到两个清晰的模式：- 首先，随着 NAP 的增加，海滩无脊椎动物的物种丰富度下降。- 其次，更微妙的是，随着 NAP 的增加，底栖生物丰富度的变异性下降。看到点沿 x 轴收缩的方式了吗？

如果我们想更深入地了解这种关系的形状，可以通过添加一个 `geom`（即 `geom_smooth()`）来为图添加回归线或最佳拟合线。我们将稍微美化一下这张图（图 3.20）。
```{r}
ggplot(Benthic, aes(x = NAP, y = Richness)) +
  geom_point(alpha = 0.6) + # Added some transparency to the points
  geom_smooth(
    method = "lm", 
    se = TRUE, # add in some confidence interval
    color = "red",       # Change line color to red
    linewidth = 1.2    # Make the line slightly thicker
  ) +
  theme_bw()
```

**Fig. 3.20: A linear regression line with confidence intervals on the scatterplot**.

We may wish to know whether the relationship is better visualised by a loess smoother (don't worry about this term we'll cover it elsewhere). To do this we simply add another `geom` that makes a wiggly line (Fig. 3.21).

我们或许想知道，用 Loess 平滑器（不用担心这个术语，我们会在其他地方讨论）是否能更好地展现这种关系。为此，我们只需添加另一个用于绘制波浪线的“geom”（图 3.21）。
```{r}
# 
ggplot(Benthic, aes(x = NAP, y = Richness)) +
  geom_point(alpha = 0.5) +  # transparent points
  
  # Add linear model (lm) 
  geom_smooth(
    method = "lm", 
    se = TRUE,          # Add confidence interval
    color = "red",       # linear fit is a red line
    linewidth = 1
  ) +
  
  # Add loess smoother
  geom_smooth(
    method = "loess", 
    se = TRUE,          # Add confidence interval
    color = "blue",      # loess curve is blue
    linewidth = 1
  ) +
  
  # Add labels and a clean theme 
  labs(
    title = "Comparison of Linear and Loess Models",
    subtitle = "Red = Linear Model (lm), Blue = Loess Smoother",
    x = "NAP",
    y = "Richness"
  ) +
  theme_bw()
```

**Fig. 3.21: A comparison of linear and loess fits to the beach dataset**.

We see from this that the lines are very similar and that the confidence intervals sit on top of each other so a linear fit is fine in this instance.

## Using one continuous and one factor variable
Boxplots using factors (grouping or categorical) factors come into their own when mixed with continuous variables. We might wish to know how the samples on each beach differ in terms of their species richness. We can accomplish this in the following way. Lots of additional code her show other things. Read the comments in the code chunk. **Important note** - `ggplot` deals with different classes of variable in a difference manner. We want the Beach variable to be a grouping variable (or factor) here. It is currently an integer. To make sure we use a factor we add `factor(Beach)` to our code (see first line) (Fig. 3.22). We could use the `mutate()` function from `dplyr` to add a new variable to the dataframe called `FBeach.` **Have a go**. If you are successful you need to add `FBeach` in line one instead of `factor(Beach)`.

由此可见，这些线非常相似，而且置信区间彼此重叠，因此在本例中线性拟合是可以的。

## 使用一个连续变量和一个因子变量
使用因子（分组或分类）的箱线图在与连续变量混合时效果更佳。我们可能想知道每个海滩上的样本在物种丰富度方面有何不同。我们可以通过以下方式实现这一点。这里还有许多额外的代码展示了其他内容。请阅读代码块中的注释。**重要提示** - `ggplot` 以不同的方式处理不同类别的变量。我们希望 Beach 变量在这里成为一个分组变量（或因子）。它目前是一个整数。为了确保我们使用了因子，我们在代码中添加了 `factor(Beach)`（参见第一行）（图 3.22）。我们可以使用 `dplyr` 中的 `mutate()` 函数向名为 FBeach 的数据框中添加一个名为 FBeach 的新变量。**试一试**。如果成功，则需要在第一行添加“FBeach”而不是“factor(Beach)”。
```{r}
ggplot(Benthic, aes(x = factor(Beach), y = Richness)) +

geom_boxplot(
    fill = "skyblue",
    alpha = 0.7,
    # This tells the boxplot geom to NOT draw the outlier points.
    # THISMIS CRUCIAL OTHERWISE IT WILL PLOT TOO MANY POINTS - IT'LL ADD ADDITIONAL POINTS - WHAT IT THINKS ARE OUTLIERS.
    outlier.shape = NA 
  ) +
  
  # plot all points.
  geom_jitter(
    width = 0.2,
    alpha = 0.5
  ) +
  
  # Add labels and a clean theme 
  labs(
    title = "Species Richness Across 9 Beaches",
    subtitle = "Each point represents one of five samples per beach",
    x = "Beach",
    y = "Species Richness"
  ) +
  theme_bw()
```

**Fig. 3.22: Boxplot showing the pattern of species richness in our beach samples**.


**TASK: To see why replace line one with the code below. Make sure the line ends with the plus `+` symbol**.

`ggplot(Benthic, aes(x = Beach), y = Richness) +`

Looking at the plot you can see that a lot of the patterning in our regression (Fig. 3.21) is being driven by the data points in beaches 1 and 2 that have much higher values than beaches 3-9. You can also see that there is a lot of heterogeneous variability in the samples within each of the beaches.

### Examining a mixture of three variables (continuous and factor)

To do this we'll import a new dataset, `Grazing.csv`.

**任务：要了解原因，请将第一行替换为以下代码。确保该行以加号 `+` 结尾**。

`ggplot(Benthic, aes(x = Beach), y = Richness) +`

查看图表，您会发现回归模型（图 3.21）中的许多模式是由海滩 1 和 2 中的数据点驱动的，这些数据点的值远高于海滩 3-9。您还可以看到，每个海滩内的样本都存在大量的异质性变异。

### 检查三个变量（连续变量和因子变量）的混合

为此，我们将导入一个新的数据集 `Grazing.csv`。
```{r}
Rye <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/Grazing.csv")
```
Have a look at it.
```{r}
skim(Rye)
str(Rye)
```
It has 18 rows and 3 columns:

- `Abund` is the the amount of rye grass in plots within a field. It is `num` (numeric) class variable.
- `Field` shows the location of plots in the field; it is `chr` (character) class with 2 unique values 'top' and 'bottom'. 
- `Grazing` indicate level of grazing in the plots; it is `chr` (character) class with 3 unique values 'low', 'medium' and 'high'. 

There are no missing values. 

We could use two conditional boxplots to show the variation in Abund against both Field and Grazing, but it makes sense to try and combine them all. We can do this using `geom_violin` to show the pattern in rye grass abundance, and `facet_wrap` to compare the grazing levels (Fig. 3.23). `geom_violin` gets around the issue with boxplots print additional points on the plots.

它有 18 行 3 列：

- `Abund` 表示田地中各样地的黑麦草丰度。它是一个 `num`（数值）类变量。
- `Field` 表示田地中样地的位置；它是一个 `chr`（字符）类变量，包含两个唯一值：“top”和“bottom”。
- `Grazing` 表示样地的放牧程度；它是一个 `chr`（字符）类变量，包含三个唯一值：“low”、“medium”和“high”。

没有缺失值。

我们可以使用两个条件箱线图来显示 Abund 与 Field 和 Grazing 变量的变化，但尝试将它们全部结合起来更有意义。我们可以使用 `geom_violin` 来显示黑麦草丰度的模式，并使用 `facet_wrap` 来比较放牧程度（图 3.23）。 `geom_violin` 解决了箱线图在图上打印额外点的问题。
```{r}
# Load data and assign axes.
ggplot(Rye, aes(x = Field, y = Abund, fill = Field)) +
  
  # Use geom_violin to visualise the distribution shape
  geom_violin(trim = FALSE, alpha = 0.7) +
  geom_jitter(width = 0.2, alpha = 0.6) +
  
  # This creates a separate plot for each level in the 'Grazing' column
  facet_wrap(~ Grazing) +
  
  # Add labels and a clean theme
  labs(
    title = "Abundance by Field Position, Faceted by Grazing Level",
    x = "Field Position",
    y = "Abundance"
  ) +
  theme_bw() +
  theme(legend.position = "none") # Hide redundant legend
```
**Fig. 3.23: A violin plot showing the differences in rye grass abundance by grazing level and field location**.

This shows a number of patterns. First, grazing level is linked to abundance. The more there is the higher the abundance of rye grass. This makes sens ab rye grass in less palatable to grazers because its stems etc have higher levels of silica. It also shows that the position in field only appears to be important where grazing levels are higher. **Try flipping the factor variables around i.e. swapping Field and Gazing in the code and see what happens**. 

When dealing with multivariate data, that has different classes we need to think about likely dependencies between variables. These types of issues can be problematic when we analyse data so it is important to think about in our EDA. **Facetting** is a powerful tool to do this. Let's return to our Benthic dataframe. We have species richness counts for each of nine beaches and our global regression plot (Fig. 3.20) suggests a clear pattern. But does this relationship hold for all the nine beaches or is their variability in it? Let's have a look (Fig. 3.24).

这揭示了一些模式。首先，放牧水平与丰度相关。放牧水平越高，黑麦草的丰度就越高。这使得黑麦草对食草动物来说不太可口，因为它的茎等含有更高的二氧化硅。这也表明，只有在放牧水平较高的情况下，田间位置才显得重要。**尝试翻转因子变量，即在代码中交换“Field”和“Gazing”，看看会发生什么**。

处理包含不同类别的多变量数据时，我们需要考虑变量之间可能存在的依赖关系。这类问题在分析数据时可能会造成问题，因此在EDA中考虑这些问题非常重要。**分面**是一个强大的工具。让我们回到我们的底栖生物数据框。我们有九个海滩的物种丰富度计数，我们的全局回归图（图3.20）显示出一个清晰的模式。但这种关系适用于所有九个海滩吗？还是说它们之间存在差异？我们来看一下（图3.24）。
```{r}
ggplot(Benthic, aes(x = NAP, y = Richness)) +
  geom_point(alpha = 0.6) + # Added some transparency to the points
  geom_smooth(
    method = "lm", 
    se = TRUE, # add in some confidence interval
    color = "red",       # Change line color to red
    linewidth = 1.2    # Make the line slightly thicker
  ) +
  facet_wrap(
    ~ Beach
  ) +
  # Set the y-axis viewing window to start at 0. You cannot have a negative count of species richness.
  coord_cartesian(ylim = c(0, NA)) +
  
  theme_bw()
```
**Fig. 3.24: A facet plot showing the Richness / NAP relationship on the individual beaches**.

This is complex but it tells us a lot. We see that:

-  The slopes of the relationship vary by beach, so NAP is has a bigger influence on richness on beaches 2, 3 and 9.
- Richness levels differ by beach. See the height of the lines on the respective Y axes. 
- NAP levels are more negative on beaches 1,2,6,7 and 9. See the lines and data points are more to the left in each box.
- Beaches 2, 5 and 9 have more variability in richness values across the 5 samples. See width of confidence intervals shown in grey.

We have learned a lot here and we can take that information into any analysis we carry out.

这很复杂，但它揭示了很多信息。我们发现：

- 关系的斜率因海滩而异，因此NAP对海滩2、3和9的丰富度的影响更大。
- 不同海滩的丰富度水平也不同。请参见相应Y轴上线条的高度。
- 海滩1、2、6、7和9的NAP水平为负值较大。请参见每个方框中的线条和数据点更靠左。
- 海滩2、5和9在5个样本中的丰富度值差异更大。请参见灰色显示的置信区间宽度。

我们在这里学到了很多东西，并且可以将这些信息运用到我们进行的任何分析中。

## Summary
Everything we have done today is to show how various graphical representations can show patterns in our datasets. Understanding this is crucial ahead of any analyses to make sure that you select the correct approaches but also are informed enough to interpret any puzzling outcomes. Clearly, we have only scratched the surface of what is possible with these tools. We will reinforce EDA strategies as we move forward in our analytical journey, as the workshops progress.

我们今天所做的一切都是为了展示各种图形表示如何展现数据集中的模式。在进行任何分析之前，理解这一点至关重要，这样才能确保你选择正确的方法，同时也能充分理解任何令人费解的结果。显然，我们只是触及了这些工具的皮毛。随着研讨会的进展，我们将在分析过程中不断推进，强化 EDA 策略。

## Class Exercises

### EXERCISE 1: boxplots                                             
Use the Deer.txt dataset. Create boxplots to illustrate the difference between:

- Animal size v gender
- Change the default colour scheme, add labels to the axes
- Save it as jpeg file

### EXERCISE 2: Scatterplots                                          
Use the Vegetation2.csv dataset and:

- Plot a graph showing Species Richness against Exposed (BARESOIL)
- Add a linear trend line
- Save it as a Tiff file

### EXERCISE 3: facetting                            
Use the deep sea research data (ISIT.txt).

- Use ggplot2 to plot depth v bioluminscence for each station. 

### EXERCISE 4: plot three continuous variables on one figure.
Return to the beach dataset (called Benthic). Recall it has three continuous variables Richness, NAP and Exposure (you did not use this one). Look at the hydrological example above (i.e. Fig. 3.11) and create a similar looking plot that uses all three variables in the Benthic data. Note: Richness is the y axis, NAP is the x axis. How will you use Exposure in your plot?

### 练习 1：箱线图
使用 Deer.txt 数据集。创建箱线图来说明以下两者之间的区别：

- 动物大小与性别
- 更改默认配色方案，为坐标轴添加标签
- 保存为 jpeg 文件

### 练习 2：散点图
使用 Vegetation2.csv 数据集并：

- 绘制物种丰富度与裸土（BARESOIL）关系的图表
- 添加线性趋势线
- 保存为 Tiff 文件

### 练习 3：分面
使用深海研究数据 (ISIT.txt)。

- 使用 ggplot2 绘制每个站点的深度与生物发光关系图。

### 练习 4：在一张图上绘制三个连续变量。
回到海滩数据集（名为“底栖”）。回想一下，它有三个连续变量：丰富度、净水量 (NAP) 和暴露度（你没有使用这个变量）。参考上面的水文示例（即图 3.11），并创建一个类似的图表，使用底栖生物数据中的所有三个变量。注意：丰富度为 y 轴，NAP 为 x 轴。您将如何在图表中使用暴露度？

## References
