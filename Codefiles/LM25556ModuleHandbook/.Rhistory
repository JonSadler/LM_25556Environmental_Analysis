# sheet = 2 is the datasheet number within the spreadsheet [they are number 1-n left to right!]
fish <- read_xlsx("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/fish.xlsx", sheet=2)
names(Squid)        # Lists the column (or variable names)
str(Squid)          # Indicates the structure of the data frame (i.e. variable types etc)
head(Squid)         # Lists the first 6 rows of data
tail(Squid)         # No prizes for guessing what that does....
dim(Squid)          # Lists the dimensions of the data frame (in this case 2644 cases or rows and 6 variables or columns)
skim(Squid)
Veg <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/Vegetation.csv")
unique(Veg$Transect)
tapply(Veg$R, Veg$Transect, mean)
Me <- tapply(Veg$R, Veg$Transect, mean)    # Calculates the mean
Sd <- tapply(Veg$R, Veg$Transect, sd)      # Calculates the sd
Le <- tapply(Veg$R, Veg$Transect, length)  # Calculates the number of observations (length)
Descriptors <- cbind(Me, Sd, Le)
Descriptors
glimpse(Veg)
Veg1 <- Veg %>% select("R", "FallPrec","SprPrec","SumPrec","WinPrec") # Here we are selection by columun names
Veg1 <- Veg %>% select(5, 10:21) # this selects column 5 (R) and then all the climate variables
Veg %>% slice(1:5)           # first 5 rows
Veg %>% slice_tail(n = 10)   # last 3 rows
Veg %>% slice_sample(n = 20) # 20 random rows
Veg %>% filter(Transect == 1:2) # displays all the records in transects 1 and 2
Veg %>% summarise(mean=mean(FallPrec), sd=sd(FallPrec), var=var(FallPrec), length=length(FallPrec))
sleep1 <- Sleep %>%
mutate(rem_proportion = sleep_rem / sleep_total,
bodywt_grams = bodywt * 1000)
sleep1
glimpse(fish)
#load in the file
env <- read_xlsx("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/fish.xlsx", sheet=3)
# now join the fish and env using the common key, Site_no.
fish_env <- fish %>%
left_join(env, join_by(Site_no))
str(fish_env)
Veg %>% group_by(Transect) %>% summarise(mean=mean(R), sd=sd(R), var=var(R))
Sleep %>% arrange(-bodywt) %>% slice(1:10) # rows 1 to 10. OR:
Sleep %>% arrange(-bodywt) %>% slice_head(n=10) # uses a different dplyr function slice_head()
# Create some messy data (wide-style, species split into columns)
Site   <- c("Site1", "Site2", "Site3")
Sample <- c("S1", "S2", "S3")
Plot   <- c("P1", "P2", "P3")
Sp1    <- c(123, 533, NA)
Sp2    <- c(156, 45, 45)
Sp3    <- c(243, 4, 345)
messy_df <- data.frame(Site, Sample, Plot, Sp1, Sp2, Sp3)
messy_df
# Tidy (long) data
tidy_df <- messy_df %>%
pivot_longer(cols = starts_with("Sp"),
names_to = "Species", # new column
values_to = "Count")  # another new column
tidy_df
streamT<-read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/streamT.csv")
glimpse(streamT)
streamTTidy <- streamT %>%  # selects our df
pivot_longer(cols = 3:29, # finds the columns to pivot (i.e. they are all dates)
names_to = "DateT", # writes the column names into the rows
values_to = "Temp") # pulls the temperature data from the cells and puts in the rows linked to the date when the measurement was taken.
StreamTTidier <- streamTTidy %>%
separate(DateT, into = c("Date", "Time"), sep = "\\ ") %>%
separate(Date, into = c("Day", "Month", "Year"), sep = "\\/") %>%
separate(Time, into = c("Hour", "Min"), sep = "\\:")
StreamTTidier2 <- streamT %>% gather(DateT, Temp, 3:29) %>%
separate(DateT, into = c("Date", "Time"), sep = "\\ ") %>%
separate(Date, into = c("Day", "Month", "Year"), sep = "\\/") %>%
separate(Time, into = c("Hour", "Min"), sep = "\\:")
#| label: deer-table
#| echo: false
#| message: false
#| warning: false
# Load the necessary library for creating tables
library(knitr)
# Create a data frame with your data
# Using NA for missing values is the correct R practice
deer_data <- data.frame(
Farm = c("MO", "MO", "MO", "MO", "LN", "SE", "QM"),
Month = c(11, 7, 7, NA, 9, 9, 11),
Year = c("00", "00", "01", NA, "03", "03", "02"),
Sex = c(1, 2, 2, 2, 1, 2, 2),
LengthClass = c(1, 1, 1, 1, 1, 1, 1),
LengthCT = c(75, 85, 91.6, 95, NA, 105.1, 106),
Ecervi = c(0, 0, 0, NA, 0, 0, 0),
Tb = c(0, 0, 1, NA, 0, 0, 0)
)
# Use kable() to format the data frame into a clean table
# and add a caption for context.
kable(deer_data, caption = "Table 1: Deer Measurement Data")
#| label: EDA cycle
#| echo: false
#| fig-cap: "**Fig. 3.1: The EDA cycle (after Ismay et al. 2025)**"
knitr::include_graphics("images/EDA_cycle.png")
# List of packages
packages <- c("skimr","readxl","tidyverse","janitor")
# Load all packages and install the packages we have no previously installed on the system
lapply(packages, library, character.only = TRUE)
#| label: fig-rstudio-object
#| echo: false
#| fig-cap: "**Fig. 3.2: ggplot layering of elements**"
knitr::include_graphics("images/ggplot_grammar.jpg")
#| label: rstudio-syntax
#| echo: false
#| fig-cap: "**Fig. 3.4: The code syntax for a ggplot call)**"
knitr::include_graphics("images/ggplot_code.png")
#| label: hydro-plot
#| echo: false
#| fig-cap: "Figure 3.4: River discharge variability in relation to catchment size"
knitr::include_graphics("images/dischargePlot.png")
# Load data
data <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/Riv_hydrol.csv")
skim(data)
# create plot blank canvas
ggplot(data = data) # when run it we get a grey box in plot window (bottom left)
ggplot(
data = data,
mapping = aes(x = Ran, y = Mean)
)
ggplot(data, aes(x = Ran, y = Mean)) +
geom_point(
)
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
geom_point(
)
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
geom_point(
) +
# Set the axis labels here for clarity
scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
# Add the labels, title, subtitle and caption. Note expression(paste) functions to add the superscript
labs(
title = "River Discharge Increases with Catchment Area", # main title
subtitle = "A comparison of mean daily discharge across various rivers", # subtitle
size = expression(paste("Catchment Area ", "(",km^2,")")), # this sorts out the caption title
caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."  # caption
)
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
geom_point(
shape = 21, # shape 21 is a circle but we are going to remove the default theme so we specify it.
colour = "grey30", # change the outline of the points to light grey
fill = "#4682B4", # change the point colour to light blue
alpha = 0.7 # Modify the opacity to make it more translucent
) +
# Set the axis labels here for clarity
scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
# Add the labels, title, subtitle and caption. Note expression(paste) functions to add the superscript
labs(
title = "River Discharge Increases with Catchment Area", # main title
subtitle = "A comparison of mean daily discharge across various rivers", # subtitle
size = expression(paste("Catchment Area ", "(",km^2,")")), # this sorts out the caption title
caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."  # caption
)
ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
geom_point(
shape = 21, # shape 21 is a circle but we are going to remove the default theme so we specify it.
colour = "grey10", # change the outline of the points to light grey
fill = "#4682B4", # change the point colour to light blue
alpha = 0.7 # Modify the opacity to make it more translucent
) +
scale_size_area(max_size = 12) +
# Set the axis labels
scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
# Add the labels. Note expression(paste) functions to add the superscript
labs(
title = "River Discharge Increases with Catchment Area",
subtitle = "A comparison of mean daily discharge across various rivers",
size = expression(paste("Catchment Area ", "(",km^2,")")),
caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."
) +
# Use coord_cartesian to set the viewport, start axes at 0, and turn off clipping.
coord_cartesian(
xlim = c(0, 600), # sets X axis limits
ylim = c(0, 60), # sets Y axis limits
expand = FALSE,  # This creates the tight axis look, starting at 0
clip = "off"     # This allows points to be drawn outside the panel
) +
theme_bw(base_size = 14) + # change the theme from default to black and white. Set base font size to 14
theme(
panel.grid.minor = element_blank(), #remove the minor grids
panel.border = element_blank(), # remove the plot border
axis.line = element_line(colour = "grey50"), #Change axis line colour to grey
plot.title.position = "plot", # aligns title to far left margin of the full plot. Change 'plot' to 'panel' to see the difference.
plot.caption.position = "plot", # as above
plot.caption = element_text(hjust = 0, color = "grey60"), # aligns the caption to the far left (hjust = 0) i.e. no left padding. Sets text colour to mid grey.
legend.position = "top", # place the legend on the top from the right hand size
# Add a little margin to the whole plot to ensure there's room
plot.margin = margin(10, 15, 10, 10) # Specify margins around the plot. Top, Right, Bottom, Left
)
#
plot <- ggplot(data, aes(x = Ran, y = Mean, size = Carea)) +
geom_point(
shape = 21, # shape 21 is a circle but we are going to remove the default theme so we specify it.
colour = "grey10", # change the outline of the points to light grey
fill = "#4682B4", # change the point colour to light blue
alpha = 0.7 # Modify the opacity to make it more translucent
) +
scale_size_area(max_size = 12) +
# Set the axis labels
scale_x_continuous(name = expression(paste("Yearly Discharge Range ", "(", m^3, "/",s^-1,")"))) +
scale_y_continuous(name = expression(paste("Mean Daily Discharge ", "(", m^3, "/",s^-1,")"))) +
# Add the labels. Note expression(paste) functions to add the superscript
labs(
title = "River Discharge Increases with Catchment Area",
subtitle = "A comparison of mean daily discharge across various rivers",
size = expression(paste("Catchment Area ", "(",km^2,")")),
caption = "Data points represent individual rivers. Bubble size is proportional to catchment area."
) +
# Use coord_cartesian to set the viewport, start axes at 0, and turn off clipping.
coord_cartesian(
xlim = c(0, 600), # sets X axis limits
ylim = c(0, 60), # sets Y axis limits
expand = FALSE,  # This creates the tight axis look, starting at 0
clip = "off"     # This allows points to be drawn outside the panel
) +
theme_bw(base_size = 14) + # change the theme from default to black and white. Set base font size to 14
theme(
panel.grid.minor = element_blank(), #remove the minor grids
panel.border = element_blank(), # remove the plot border
axis.line = element_line(colour = "grey50"), #Change axis line colour to grey
plot.title.position = "plot", # aligns title to far left margin of the full plot. Change 'plot' to 'panel' to see the difference.
plot.caption.position = "plot", # as above
plot.caption = element_text(hjust = 0, color = "grey60"), # aligns the caption to the far left (hjust = 0) i.e. no left padding. Sets text colour to mid grey.
legend.position = "top", # place the legend on the top from the right hand size
# Add a little margin to the whole plot to ensure there's room
plot.margin = margin(10, 15, 10, 10) # Specify margins around the plot. Top, Right, Bottom, Left
)
# print the plot
plot
# Save plot to file
ggsave(plot, file = "~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Codefiles/LM25556ModuleHandbook/images/dischargePlot.png", width = 8, height = 4) # units are centimeters
#load file
air <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/airpollution.csv")
skim(air)
# sort out space is column names
air <- air %>% clean_names()
names(air)
ggplot(data=subset(air, !is.na(nitrogen_oxides)), aes(x=nitrogen_oxides)) + geom_histogram(binwidth=20)
# set binwidth = 20
# ggplot does not like NAs in the data for plots (see data file - there are 4 rows)
# To avoid the error message we use: data=subset(Air, !is.an(Nitrogen.Oxides)) to subset the rows with numbers
# Draw with black outline, grey fill
ggplot(data=subset(air, !is.na(nitrogen_oxides)),aes(x=nitrogen_oxides)) +
geom_histogram(binwidth=20, colour="black", fill="grey90") +
labs(x="Nitrogren Oxide levels") + # add a label
theme_bw() + # change dafualt scheme to black and white....this removes axes and other things!
theme(
panel.grid.minor = element_blank(), #remove the minor grids
panel.grid.major = element_blank(), #remove the minor grids
panel.border = element_blank(), # remove the plot border
axis.line = element_line(colour = "black") # Add axis lines back for a cleaner look
)
library(patchwork) # For arranging the final plots
# create symmetrical distribution (Normal)
sym_mean <- 0
sym_median <- 0
sym_mode <- 0
sym_peak <- dnorm(sym_mode, mean = sym_mean)
p_sym <- ggplot(data.frame(x = c(-4, 4)), aes(x = x)) +
stat_function(fun = dnorm, n = 101) +
annotate("segment", x = sym_mean, y = 0, xend = sym_mean, yend = sym_peak, linetype = "dashed") +
# Adjust label position for the new y-axis
annotate("text", x = sym_mean, y = sym_peak + 0.05,
label = "Mean\nMedian\nMode", lineheight = 0.8) +
coord_cartesian(ylim = c(0, 0.6)) +
labs(x = "\nSymmetrical\nDistribution")
# create positive skew (Gamma)
pos_shape <- 3
pos_rate <- 1
pos_mean <- pos_shape / pos_rate
pos_mode <- (pos_shape - 1) / pos_rate
pos_median <- qgamma(0.5, shape = pos_shape, rate = pos_rate)
pos_peak <- dgamma(pos_mode, shape = pos_shape, rate = pos_rate)
p_pos <- ggplot(data.frame(x = c(0, 10)), aes(x = x)) +
stat_function(fun = dgamma, args = list(shape = pos_shape, rate = pos_rate), n = 101) +
annotate("segment", x = pos_mean, y = 0, xend = pos_mean, yend = dgamma(pos_mean, shape=pos_shape, rate=pos_rate), linetype = "dashed") +
annotate("segment", x = pos_median, y = 0, xend = pos_median, yend = dgamma(pos_median, shape=pos_shape, rate=pos_rate), linetype = "solid") +
annotate("segment", x = pos_mode, y = 0, xend = pos_mode, yend = pos_peak, linetype = "solid") +
annotate("text", x = pos_mean + 0.2, y = pos_peak * 0.8, label = "Mean", hjust = 0) +
annotate("text", x = pos_median, y = pos_peak + 0.03, label = "Median", hjust = 0.5) +
annotate("text", x = pos_mode - 0.2, y = pos_peak * 0.8, label = "Mode", hjust = 1) +
# Keep the tighter ylim for the skewed plots
coord_cartesian(ylim = c(0, 0.45)) +
labs(x = "\nPositive\nSkew")
# Create negative Skew (Flipped Gamma)
neg_mean <- -pos_mean
neg_mode <- -pos_mode
neg_median <- -pos_median
neg_peak <- pos_peak
p_neg <- ggplot(data.frame(x = c(-10, 0)), aes(x = x)) +
stat_function(fun = function(x) dgamma(-x, shape = pos_shape, rate = pos_rate), n = 101) +
annotate("segment", x = neg_mean, y = 0, xend = neg_mean, yend = dgamma(-neg_mean, shape=pos_shape, rate=pos_rate), linetype = "dashed") +
annotate("segment", x = neg_median, y = 0, xend = neg_median, yend = dgamma(-neg_median, shape=pos_shape, rate=pos_rate), linetype = "solid") +
annotate("segment", x = neg_mode, y = 0, xend = neg_mode, yend = neg_peak, linetype = "solid") +
annotate("text", x = neg_mean - 0.2, y = neg_peak * 0.8, label = "Mean", hjust = 1) +
annotate("text", x = neg_median, y = neg_peak + 0.03, label = "Median", hjust = 0.5) +
annotate("text", x = neg_mode + 0.2, y = neg_peak * 0.8, label = "Mode", hjust = 0) +
# Keep the tighter ylim for the skewed plots
coord_cartesian(ylim = c(0, 0.45)) +
labs(x = "\nNegative\nSkew")
# Define a Common Theme for a Clean Look
theme_skew <- theme_classic() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 14),
axis.line.y = element_blank()
)
# Combine the plots
(p_pos + theme_skew) + (p_sym + theme_skew) + (p_neg + theme_skew)
# plot some qq-plots
ggplot(data=subset(air, !is.na(nitrogen_oxides)), aes(sample=nitrogen_oxides)) +
stat_qq() +
stat_qq_line()
#make this example reproducible
set.seed(1)
#create some fake data that follows a normal distribution for 200 data points
df <- data.frame(col=rnorm(200))
#create Q-Q plot
ggplot(df, aes(sample=col)) +
stat_qq() +
stat_qq_line()
#create a boxplot
ggplot(air, aes(x = 1, y = nitrogen_oxides)) + # Note I left the !is.na() element out and ggplot gives you a prod telling you 4 four rows are being removed.
geom_boxplot() +
scale_x_continuous(breaks = NULL) # we need this new code otherwise R will add a 'fake' x axis!
#| label: boxplot explanation
#| echo: false
#| fig-cap: "**Fig. 3.18: Components of a boxplot**"
knitr::include_graphics("images/boxplot.png")
#create a boxplot
ggplot(df, aes(x = 1, y = col)) +
geom_boxplot() +
scale_x_continuous(breaks = NULL)
Benthic <- read.table("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/RIKZ.txt", header = TRUE) # It is tab delineated so we use read.table
glimpse(Benthic)
skim(Benthic)
unique(Benthic$Beach) # there are 9 beaches
ggplot(Benthic, aes(x = NAP, y = Richness)) +
geom_point(
)
ggplot(Benthic, aes(x = NAP, y = Richness)) +
geom_point(alpha = 0.6) + # Added some transparency to the points
geom_smooth(
method = "lm",
se = TRUE, # add in some confidence interval
color = "red",       # Change line color to red
linewidth = 1.2    # Make the line slightly thicker
) +
theme_bw()
#
ggplot(Benthic, aes(x = NAP, y = Richness)) +
geom_point(alpha = 0.5) +  # transparent points
# Add linear model (lm)
geom_smooth(
method = "lm",
se = TRUE,          # Add confidence interval
color = "red",       # linear fit is a red line
linewidth = 1
) +
# Add loess smoother
geom_smooth(
method = "loess",
se = TRUE,          # Add confidence interval
color = "blue",      # loess curve is blue
linewidth = 1
) +
# Add labels and a clean theme
labs(
title = "Comparison of Linear and Loess Models",
subtitle = "Red = Linear Model (lm), Blue = Loess Smoother",
x = "NAP",
y = "Richness"
) +
theme_bw()
ggplot(Benthic, aes(x = factor(Beach), y = Richness)) +
geom_boxplot(
fill = "skyblue",
alpha = 0.7,
# This tells the boxplot geom to NOT draw the outlier points.
# THISMIS CRUCIAL OTHERWISE IT WILL PLOT TOO MANY POINTS - IT'LL ADD ADDITIONAL POINTS - WHAT IT THINKS ARE OUTLIERS.
outlier.shape = NA
) +
# plot all points.
geom_jitter(
width = 0.2,
alpha = 0.5
) +
# Add labels and a clean theme
labs(
title = "Species Richness Across 9 Beaches",
subtitle = "Each point represents one of five samples per beach",
x = "Beach",
y = "Species Richness"
) +
theme_bw()
Grazing <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/Grazing.csv")
Rye <- read_csv("~/Documents/GitHub/Teaching/LM_25556Environmental_Analysis/Data/Grazing.csv")
skim(Rye)
str(Rye)
# Load data and assign axes.
ggplot(Rye, aes(x = Field, y = Abund, fill = Field)) +
# Use geom_violin to visualise the distribution shape
geom_violin(trim = FALSE, alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.6) +
# This creates a separate plot for each level in the 'Grazing' column
facet_wrap(~ Grazing) +
# Add labels and a clean theme
labs(
title = "Abundance by Field Position, Faceted by Grazing Level",
x = "Field Position",
y = "Abundance"
) +
theme_bw() +
theme(legend.position = "none") # Hide redundant legend
Rye_summary <- Rye %>%
group_by(Grazing, Field) %>%
summarise(mean_abund = mean(Abund), .groups = 'drop')
ggplot(Rye_summary, aes(x = Grazing, y = mean_abund, group = Field, color = Field)) +
geom_line(linewidth = 1.2) +
geom_point(size = 4) +
# --- Add labels and a clean theme ---
labs(
title = "Interaction of Grazing and Field Position on Mean Abundance",
x = "Grazing Level",
y = "Mean Abundance",
color = "Field Position"
) +
theme_bw()
# --- Step 1: Create the summary data frame with ordered factors ---
Rye_summary <- Rye %>%
# Convert 'Grazing' to a factor with a specific order
mutate(Grazing = factor(Grazing, levels = c("Low", "Mid", "High"))) %>%
# Group by both categorical variables
group_by(Grazing, Field) %>%
# Calculate the mean, count, standard deviation, and standard error
summarise(
n = n(),
mean_abund = mean(Abund),
sd_abund = sd(Abund),
sem = sd_abund / sqrt(n),
.groups = 'drop' # Recommended to drop grouping after summarise
) %>%
# Calculate the 95% confidence interval boundaries
mutate(
ic = sem * 1.96, # Interval of confidence
upper_ci = mean_abund + ic,
lower_ci = mean_abund - ic
)
# --- Step 2: Create the interaction plot ---
ggplot(Rye_summary, aes(x = Grazing, y = mean_abund, group = Field, color = Field)) +
# --- Add the error bars ---
# This geom will draw the vertical lines for the confidence intervals
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
width = 0.1,  # Width of the horizontal caps on the error bars
linewidth = 0.8
) +
# --- Add the lines connecting the means ---
geom_line(linewidth = 1.2) +
# --- Add the points for the means ---
geom_point(size = 4) +
# --- Add labels, colors, and a clean theme ---
labs(
title = "Interaction of Grazing and Field Position on Mean Abundance",
subtitle = "Error bars represent 95% confidence intervals",
x = "Grazing Level",
y = "Mean Abundance",
color = "Field Position"
) +
scale_color_brewer(palette = "Set1") +
theme_bw(base_size = 14)
ggplot(Benthic, aes(x = NAP, y = Richness)) +
geom_point(alpha = 0.6) + # Added some transparency to the points
geom_smooth(
method = "lm",
se = TRUE, # add in some confidence interval
color = "red",       # Change line color to red
linewidth = 1.2    # Make the line slightly thicker
) +
facet_wrap(
~ Beach
)
theme_bw()
ggplot(Benthic, aes(x = NAP, y = Richness)) +
geom_point(alpha = 0.6) + # Added some transparency to the points
geom_smooth(
method = "lm",
se = TRUE, # add in some confidence interval
color = "red",       # Change line color to red
linewidth = 1.2    # Make the line slightly thicker
) +
facet_wrap(
~ Beach
) +
theme_bw()
ggplot(Benthic, aes(x = NAP, y = Richness)) +
geom_point(alpha = 0.6) + # Added some transparency to the points
geom_smooth(
method = "lm",
se = TRUE, # add in some confidence interval
color = "red",       # Change line color to red
linewidth = 1.2    # Make the line slightly thicker
) +
facet_wrap(
~ Beach
) +
# Set the y-axis viewing window to start at 0. You cannot have a negative count of species richness.
coord_cartesian(ylim = c(0, NA)) +
theme_bw()
