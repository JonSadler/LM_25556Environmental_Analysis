y <- c(13, 7, 5, 12, 9, 15, 6, 11, 9, 7, 12) # create some basic data
plot(y, ylim = c(0, 20))    # plot it as a scatter limiting the axis 0 - 20
How can we quantify this scatter? We could use the range
ozone <- read.csv(file.choose())
# look at it
str(ozone)
head(ozone)
# But first we need to subset the data to pull out the bits we need for the comparison. We did this last week with the same data
GardA <- ozone[ozone$Garden == "A", ]
# And the same using the subset function
GardB <- subset(ozone, Garden == "B")
# Make a picture and check the assumptions
par(mfrow = c(2, 1))
#Add histograms with a fixed range for the X axis
hist(GardA$O3, xlim = c(0, 7), main = "", col = "Darkblue", xlab = "Garden A")
hist(GardB$O3, xlim = c(0, 7), main = "", col = "Lightblue", xlab = "Garden B")
# turn off former graphics device
dev.off()
GardB
var(GardB$O3) # for garden B
library(car)
install.packages("CAar")
install.packages("car")
library(car)
leveneTest(O3 ~ Garden, data = ozone)
t.test(GardA$O3, GardB$O3)
t.test(O3 ~ Garden, data = ozone) # Note - the data argument and '~' (tilde) operator (you'll see a lot of this)
wilcox.test(O3 ~ Garden, data = ozone)
install.packages("coin")
library(coin)
wilcox_test(O3 ~ Garden, data = ozone, distribution = "exact")
H <- c(1,2,2,5,6,5,2,1)   					# Create samples
Sam <- c(1,1,1,2,2,2,3,3) 					# Categorize samples
A.test <- data.frame(H, Sam)				# Create data frame
A.test$Sam <- as.factor(A.test$Sam)			# Make sure sample is a factor - remember we entered as a vector of integers
str(A.test)
A.test
hist(Sam, xlab = "Sample", main = "", col = "grey")
View(A.test)
Anova.run <- aov(H ~ Sam, data = A.test)
summary(Anova.run)
TukeyHSD(Anova.run)
TukeyHSD(Anova.run)
summary(Anova.run)
KW.test <- kruskal.test(A.test$H ~ A.test$Sam)
KW.test # Look at the results
summary(Anova.run)
Graze <- read.csv(file.choose())
table(Graze$Field, Graze$Grazing)
replications(Abund ~ Grazing * Field , data = Graze)
!is.list(replications(Abund ~ Grazing * Field , data = Graze)) # We're safe !!!!
hist(Graze$Abund)
Field1 <- subset(Graze,Field == "Lower")
Field2 <- subset(Graze, Field == "Top")
hist(Graze$Abund)
par(mfrow = c(2, 1))
par(mfrow = c(2, 1))
hist(Field1$Abund, xlim = c(0, 40), main = "", col = "Darkblue", xlab = "Field 1")
hist(Field2$Abund, xlim = c(0, 40), main = "", col = "Lightblue", xlab = "Field 2")
par(mfrow = c(2, 1))
par(mfrow = c(2, 1))
par(mfrow = c(2, 1))
hist(Field1$Abund, xlim = c(0, 40), main = "", col = "Darkblue", xlab = "Field 1")
hist(Field2$Abund, xlim = c(0, 40), main = "", col = "Lightblue", xlab = "Field 2")
par(mfrow = c(2, 1))
boxplot(Abund ~ Field, data = Graze)
boxplot(Abund ~ Grazing, data = Graze)
boxplot(Abund ~ Field * Grazing, ylab =  "Abundance of Rye Grass", xlab = "Contrasts of field and grazing level", data = Graze)
coplot(Abund ~ Grazing | Field, panel = panel.smooth, xlab = "Grazing Level", ylab = "Rye grass abundance", data = Graze)
Graze$Grazing <- factor(Graze$Grazing, levels = c("Low", "Mid", "High"), ordered = TRUE)
Graze$Grazing <- factor(Graze$Grazing, levels = c("Low", "Mid", "High"), ordered = TRUE)
Grazeaov <- aov(Abund ~ Field + Grazing, data = Graze)
summary(Grazeaov)
Grazeaov1 <- aov(Abund ~ Field * Grazing, data = Graze)
summary(Grazeaov1)
interaction.plot(Graze$Grazing, Graze$Field, Graze$Abund, col=c(2,3), xlab = "Grazing Regime", ylab = "Rye Grass abundance", trace.label = "Field")
library(dplyr)
install.packages("tidyverse")
Fit <- c(31,45,78,987,12,456)
X <- c(52.2,57,4,78,98,43)
Y <- c(1,2,4,5,8,2)
data <- as.dataframe(cbind(c(fit, x,y)))
data <- as.data.frame(cbind(c(fit, x,y)))
data <- as.data.frame(cbind(c(Fit, x,y)))
data <- as.data.frame(cbind(c(Fit, X,Y)))
View(data)
data <- as.data.frame(rbind(c(Fit, X,Y)))
data <- as.data.frame(Fit,X,Y)
View(data)
data <-
data.frame(Fit,X,Y)
View(data)
# Check the data structure using the scatterplotMatrix function in the car library
library(car)
library(tidyverse)
gotelli <- read.csv(file.choose())
glimpse(gotelli)
scatterplotMatrix(~Srich + as.factor(Habitat) + Latitude + Elevation, data = gotelli, diag = list(method = "boxplot"))
# Now check for inflation using VIFs. Run the model and look at the VIFs
gotelli.glm <- glm(Srich ~ Habitat + Latitude + Elevation, family = poisson, data  = gotelli)
# VIFs
vif(gotelli.glm)
gotelli$cLatitude <- scale(gotelli$Latitude, scale = T)
gotelli$cElevation <- scale(gotelli$Elevation, scale = T)
# Rerun the VIF code with the new variables
gotelli.glm <- glm(Srich ~ as.factor(Habitat) * cLatitude * cElevation, family = poisson, data  = gotelli)
vif(gotelli.glm)  # They are bit high but okay so we'll go with it....
# Check for influential data points outliers
# first we'll use influence measures to do it....
influence.measures(gotelli.glm)    # There are a couple of large cook values but they are not near 1!
# graphically plot the Cooks distances
plot(gotelli.glm, which = 4)  # few biggies but not too worrying
# check for over dispersion - recall we are looking for values around 1 (i.e. certainly not over 2 nor under 0.5)
# this is the model deviance / degrees of freedom of the residuals
gotelli.glm$deviance/gotelli.glm$df.resid
# so everything is okay so look at the results
summary(gotelli.glm)
# Lots of variables here so go for some model averaging....
library(MuMIn)
options(na.action=na.fail) # set options in Base R concerning missing values
summary(model.avg(dredge(gotelli.glm), fit = TRUE, subset = TRUE))
options(na.action = "na.omit") # reset base R options
#Â Best model includes latitude, elevation and habitat
# recreate the best model. Notice we go to the uncentred variables because we want them axes to be the original measurements
gotelli.glm <- glm(Srich ~ Habitat + Latitude + Elevation, family=poisson, data=gotelli)
summary(gotelli.glm)
# Check diagnostic plots
op <- par(mfrow = c(2, 2))
plot(gotelli.glm) # looking good
par(op)
library(ggfortify)
autoplot(gotelli.glm, which=1:6)
xs <- seq(40, 45, l = 1000)
plot(Srich ~ Latitude, data = gotelli, xlab = "Latitude", ylab = "Ant Species Richness")
# Plot the points and predicted trends
points(Srich ~ Latitude, data = gotelli, subset = Habitat == "Forest", pch = 16)
pred <- predict(gotelli.glm, type = "response", se = TRUE, newdata = data.frame(Latitude = xs, Habitat = "Forest", Elevation = mean(gotelli$Elevation)))
lines(pred$fit ~ xs)
points(Srich ~ Latitude, data = gotelli, subset = Habitat == "Bog", pch = 21)
pred <- predict(gotelli.glm, type = "response", se = TRUE, newdata = data.frame(Latitude = xs, Habitat = "Bog", Elevation = mean(gotelli$Elevation)))
lines(pred$fit ~ xs)
legend("topright", legend = c("Forest", "Bog"), pch = c(16, 21), title = "Habitat", bty = "n")
box(bty = "l")
